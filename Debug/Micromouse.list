
Micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b68  08003b68  00004b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b80  08003b80  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b80  08003b80  00004b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b88  08003b88  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b88  08003b88  00004b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b8c  08003b8c  00004b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000000c  08003b9c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003b9c  000052a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac00  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b35  00000000  00000000  0000fc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00011778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c0  00000000  00000000  000122c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016722  00000000  00000000  00012b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9f9  00000000  00000000  000292a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000941e9  00000000  00000000  00035c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9e84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f88  00000000  00000000  000c9ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000cce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003b50 	.word	0x08003b50

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003b50 	.word	0x08003b50

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <init_default_motor>:
void init_default_motor(Motor *motor,
						TIM_HandleTypeDef *fw_t,
						uint32_t fw_channel,
						TIM_HandleTypeDef *bk_t,
						uint32_t bk_channel)
{
 80004c8:	b490      	push	{r4, r7}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
 80004d4:	603b      	str	r3, [r7, #0]
	/*
	 * Forward driving PWM.
	 */
	PWM_Driver fw = {
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	61fb      	str	r3, [r7, #28]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	623b      	str	r3, [r7, #32]
			fw_t,
			fw_channel,
			fw_t->Init.Period
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	68db      	ldr	r3, [r3, #12]
	PWM_Driver fw = {
 80004e2:	627b      	str	r3, [r7, #36]	@ 0x24
	};

	/*
	 * Reverse driving PWM.
	 */
	PWM_Driver bk = {
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004ea:	617b      	str	r3, [r7, #20]
			bk_t,
			bk_channel,
			bk_t->Init.Period
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	68db      	ldr	r3, [r3, #12]
	PWM_Driver bk = {
 80004f0:	61bb      	str	r3, [r7, #24]
	};

	/*
	 * Fill parameters.
	 */
	motor->fwd = fw;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	461c      	mov	r4, r3
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80004fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	motor->back = bk;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	330c      	adds	r3, #12
 8000506:	f107 0210 	add.w	r2, r7, #16
 800050a:	ca07      	ldmia	r2, {r0, r1, r2}
 800050c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	motor->max_fwd = MOTOR_SCALE_MAX_FWD;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000516:	619a      	str	r2, [r3, #24]
	motor->max_back = MOTOR_SCALE_MAX_BACK;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a03      	ldr	r2, [pc, #12]	@ (8000528 <init_default_motor+0x60>)
 800051c:	61da      	str	r2, [r3, #28]
}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	@ 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bc90      	pop	{r4, r7}
 8000526:	4770      	bx	lr
 8000528:	bf800000 	.word	0xbf800000

0800052c <DistanceInit>:
static double distanceArray[21] = {0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200};
static uint32_t ADCCountsLeft[21] = {2290, 1779,1128,741,532,403,322,268,234,207,186,162,149,143,134,129,122,117,112,108,104};
static uint32_t ADCCountsMiddle[21] = {2400, 2241,1405,882,642,435,376,306,268,238,214,195,181,172,164,154,149,144,140,136,134};
static uint32_t ADCCountsRight[21] = {1848,1000,696,495,393,320,268,230,194,186,161,147,139,130,126,120,115,110,106,102};

void DistanceInit(ADC_HandleTypeDef *_adc, DMA_HandleTypeDef *_dma){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	adc = *_adc;
 8000536:	4a0f      	ldr	r2, [pc, #60]	@ (8000574 <DistanceInit+0x48>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4610      	mov	r0, r2
 800053c:	4619      	mov	r1, r3
 800053e:	2348      	movs	r3, #72	@ 0x48
 8000540:	461a      	mov	r2, r3
 8000542:	f003 faf7 	bl	8003b34 <memcpy>
	dma = *_dma;
 8000546:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <DistanceInit+0x4c>)
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	4610      	mov	r0, r2
 800054c:	4619      	mov	r1, r3
 800054e:	2360      	movs	r3, #96	@ 0x60
 8000550:	461a      	mov	r2, r3
 8000552:	f003 faef 	bl	8003b34 <memcpy>

	HAL_ADC_Start_DMA(&adc,(uint16_t*)&rawADCValues,3);
 8000556:	2203      	movs	r2, #3
 8000558:	4908      	ldr	r1, [pc, #32]	@ (800057c <DistanceInit+0x50>)
 800055a:	4806      	ldr	r0, [pc, #24]	@ (8000574 <DistanceInit+0x48>)
 800055c:	f000 fec8 	bl	80012f0 <HAL_ADC_Start_DMA>
	ADC1->CR2 |= ADC_CR2_DDS;
 8000560:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <DistanceInit+0x54>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	4a06      	ldr	r2, [pc, #24]	@ (8000580 <DistanceInit+0x54>)
 8000566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800056a:	6093      	str	r3, [r2, #8]
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000028 	.word	0x20000028
 8000578:	20000070 	.word	0x20000070
 800057c:	200000d0 	.word	0x200000d0
 8000580:	40012000 	.word	0x40012000

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b092      	sub	sp, #72	@ 0x48
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fdfb 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f867 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 fae3 	bl	8000b5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000596:	f000 fac1 	bl	8000b1c <MX_DMA_Init>
  MX_ADC1_Init();
 800059a:	f000 f8c9 	bl	8000730 <MX_ADC1_Init>
  MX_TIM1_Init();
 800059e:	f000 f935 	bl	800080c <MX_TIM1_Init>
  MX_TIM4_Init();
 80005a2:	f000 fa17 	bl	80009d4 <MX_TIM4_Init>
  MX_TIM9_Init();
 80005a6:	f000 fa69 	bl	8000a7c <MX_TIM9_Init>
  MX_TIM3_Init();
 80005aa:	f000 f9bf 	bl	800092c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005ae:	213c      	movs	r1, #60	@ 0x3c
 80005b0:	4823      	ldr	r0, [pc, #140]	@ (8000640 <main+0xbc>)
 80005b2:	f002 fe45 	bl	8003240 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80005b6:	213c      	movs	r1, #60	@ 0x3c
 80005b8:	4822      	ldr	r0, [pc, #136]	@ (8000644 <main+0xc0>)
 80005ba:	f002 fe41 	bl	8003240 <HAL_TIM_Encoder_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80005be:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <main+0xc4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2200      	movs	r2, #0
 80005c4:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005c6:	2100      	movs	r1, #0
 80005c8:	481f      	ldr	r0, [pc, #124]	@ (8000648 <main+0xc4>)
 80005ca:	f002 fce3 	bl	8002f94 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80005ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <main+0xc4>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2200      	movs	r2, #0
 80005d4:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005d6:	2104      	movs	r1, #4
 80005d8:	481b      	ldr	r0, [pc, #108]	@ (8000648 <main+0xc4>)
 80005da:	f002 fcdb 	bl	8002f94 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <main+0xc8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2200      	movs	r2, #0
 80005e4:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80005e6:	2100      	movs	r1, #0
 80005e8:	4818      	ldr	r0, [pc, #96]	@ (800064c <main+0xc8>)
 80005ea:	f002 fcd3 	bl	8002f94 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 80005ee:	4b17      	ldr	r3, [pc, #92]	@ (800064c <main+0xc8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80005f6:	2104      	movs	r1, #4
 80005f8:	4814      	ldr	r0, [pc, #80]	@ (800064c <main+0xc8>)
 80005fa:	f002 fccb 	bl	8002f94 <HAL_TIM_PWM_Start>
  /*
    * Motor driving.
    */
   Motor rmotor;
   Motor lmotor;
   init_default_motor(&rmotor, &htim1, TIM_CHANNEL_2, &htim1, TIM_CHANNEL_1);
 80005fe:	f107 0020 	add.w	r0, r7, #32
 8000602:	2300      	movs	r3, #0
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <main+0xc4>)
 8000608:	2204      	movs	r2, #4
 800060a:	490f      	ldr	r1, [pc, #60]	@ (8000648 <main+0xc4>)
 800060c:	f7ff ff5c 	bl	80004c8 <init_default_motor>
   init_default_motor(&lmotor, &htim9, TIM_CHANNEL_1, &htim9, TIM_CHANNEL_2);
 8000610:	4638      	mov	r0, r7
 8000612:	2304      	movs	r3, #4
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <main+0xc8>)
 8000618:	2200      	movs	r2, #0
 800061a:	490c      	ldr	r1, [pc, #48]	@ (800064c <main+0xc8>)
 800061c:	f7ff ff54 	bl	80004c8 <init_default_motor>

   DistanceInit(&hadc1, &hdma_adc1);
 8000620:	490b      	ldr	r1, [pc, #44]	@ (8000650 <main+0xcc>)
 8000622:	480c      	ldr	r0, [pc, #48]	@ (8000654 <main+0xd0>)
 8000624:	f7ff ff82 	bl	800052c <DistanceInit>
//
//       drive_motor(&rmotor, rdir);
//       drive_motor(&lmotor, ldir);
//     }

     HAL_GPIO_WritePin(GPIOA, IR_2_Pin|IR_1_Pin|IR_3_Pin|IR_4_Pin, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	21f0      	movs	r1, #240	@ 0xf0
 800062c:	480a      	ldr	r0, [pc, #40]	@ (8000658 <main+0xd4>)
 800062e:	f002 f823 	bl	8002678 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOC, IR_1_Pin|IR_5_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2190      	movs	r1, #144	@ 0x90
 8000636:	4809      	ldr	r0, [pc, #36]	@ (800065c <main+0xd8>)
 8000638:	f002 f81e 	bl	8002678 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOA, IR_2_Pin|IR_1_Pin|IR_3_Pin|IR_4_Pin, SET);
 800063c:	bf00      	nop
 800063e:	e7f3      	b.n	8000628 <main+0xa4>
 8000640:	200001c8 	.word	0x200001c8
 8000644:	20000210 	.word	0x20000210
 8000648:	20000180 	.word	0x20000180
 800064c:	20000258 	.word	0x20000258
 8000650:	20000120 	.word	0x20000120
 8000654:	200000d8 	.word	0x200000d8
 8000658:	40020000 	.word	0x40020000
 800065c:	40020800 	.word	0x40020800

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	@ 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fa34 	bl	8003adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <SystemClock_Config+0xc8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a26      	ldr	r2, [pc, #152]	@ (8000728 <SystemClock_Config+0xc8>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <SystemClock_Config+0xc8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b21      	ldr	r3, [pc, #132]	@ (800072c <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a20      	ldr	r2, [pc, #128]	@ (800072c <SystemClock_Config+0xcc>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <SystemClock_Config+0xcc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006d0:	230c      	movs	r3, #12
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006d4:	2364      	movs	r3, #100	@ 0x64
 80006d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 ffe1 	bl	80026ac <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 fadc 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2103      	movs	r1, #3
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fa43 	bl	8002b9c <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800071c:	f000 fac6 	bl	8000cac <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	@ 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000742:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <MX_ADC1_Init+0xd0>)
 8000744:	4a2f      	ldr	r2, [pc, #188]	@ (8000804 <MX_ADC1_Init+0xd4>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000748:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <MX_ADC1_Init+0xd0>)
 800074a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800074e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000750:	4b2b      	ldr	r3, [pc, #172]	@ (8000800 <MX_ADC1_Init+0xd0>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000756:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <MX_ADC1_Init+0xd0>)
 8000758:	2201      	movs	r2, #1
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800075c:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <MX_ADC1_Init+0xd0>)
 800075e:	2201      	movs	r2, #1
 8000760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <MX_ADC1_Init+0xd0>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <MX_ADC1_Init+0xd0>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <MX_ADC1_Init+0xd0>)
 8000772:	4a25      	ldr	r2, [pc, #148]	@ (8000808 <MX_ADC1_Init+0xd8>)
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000776:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <MX_ADC1_Init+0xd0>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800077c:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <MX_ADC1_Init+0xd0>)
 800077e:	2203      	movs	r2, #3
 8000780:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_ADC1_Init+0xd0>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_ADC1_Init+0xd0>)
 800078c:	2201      	movs	r2, #1
 800078e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000790:	481b      	ldr	r0, [pc, #108]	@ (8000800 <MX_ADC1_Init+0xd0>)
 8000792:	f000 fd69 	bl	8001268 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 fa86 	bl	8000cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007a0:	2309      	movs	r3, #9
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007a8:	2307      	movs	r3, #7
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4813      	ldr	r0, [pc, #76]	@ (8000800 <MX_ADC1_Init+0xd0>)
 80007b2:	f000 feab 	bl	800150c <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007bc:	f000 fa76 	bl	8000cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007c0:	230f      	movs	r3, #15
 80007c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <MX_ADC1_Init+0xd0>)
 80007ce:	f000 fe9d 	bl	800150c <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007d8:	f000 fa68 	bl	8000cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007dc:	2308      	movs	r3, #8
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007e0:	2303      	movs	r3, #3
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_ADC1_Init+0xd0>)
 80007ea:	f000 fe8f 	bl	800150c <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007f4:	f000 fa5a 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000d8 	.word	0x200000d8
 8000804:	40012000 	.word	0x40012000
 8000808:	0f000001 	.word	0x0f000001

0800080c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b092      	sub	sp, #72	@ 0x48
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000812:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2220      	movs	r2, #32
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f003 f950 	bl	8003adc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800083c:	4b39      	ldr	r3, [pc, #228]	@ (8000924 <MX_TIM1_Init+0x118>)
 800083e:	4a3a      	ldr	r2, [pc, #232]	@ (8000928 <MX_TIM1_Init+0x11c>)
 8000840:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000842:	4b38      	ldr	r3, [pc, #224]	@ (8000924 <MX_TIM1_Init+0x118>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <MX_TIM1_Init+0x118>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 800084e:	4b35      	ldr	r3, [pc, #212]	@ (8000924 <MX_TIM1_Init+0x118>)
 8000850:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000854:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b33      	ldr	r3, [pc, #204]	@ (8000924 <MX_TIM1_Init+0x118>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800085c:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_TIM1_Init+0x118>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <MX_TIM1_Init+0x118>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000868:	482e      	ldr	r0, [pc, #184]	@ (8000924 <MX_TIM1_Init+0x118>)
 800086a:	f002 fb43 	bl	8002ef4 <HAL_TIM_PWM_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000874:	f000 fa1a 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000880:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000884:	4619      	mov	r1, r3
 8000886:	4827      	ldr	r0, [pc, #156]	@ (8000924 <MX_TIM1_Init+0x118>)
 8000888:	f003 f868 	bl	800395c <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000892:	f000 fa0b 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000896:	2360      	movs	r3, #96	@ 0x60
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	481a      	ldr	r0, [pc, #104]	@ (8000924 <MX_TIM1_Init+0x118>)
 80008bc:	f002 fd4e 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80008c6:	f000 f9f1 	bl	8000cac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ce:	2204      	movs	r2, #4
 80008d0:	4619      	mov	r1, r3
 80008d2:	4814      	ldr	r0, [pc, #80]	@ (8000924 <MX_TIM1_Init+0x118>)
 80008d4:	f002 fd42 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008de:	f000 f9e5 	bl	8000cac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4619      	mov	r1, r3
 8000904:	4807      	ldr	r0, [pc, #28]	@ (8000924 <MX_TIM1_Init+0x118>)
 8000906:	f003 f897 	bl	8003a38 <HAL_TIMEx_ConfigBreakDeadTime>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000910:	f000 f9cc 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000914:	4803      	ldr	r0, [pc, #12]	@ (8000924 <MX_TIM1_Init+0x118>)
 8000916:	f000 fb5f 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 800091a:	bf00      	nop
 800091c:	3748      	adds	r7, #72	@ 0x48
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000180 	.word	0x20000180
 8000928:	40010000 	.word	0x40010000

0800092c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	@ 0x30
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2224      	movs	r2, #36	@ 0x24
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f003 f8ce 	bl	8003adc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000948:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <MX_TIM3_Init+0xa0>)
 800094a:	4a21      	ldr	r2, [pc, #132]	@ (80009d0 <MX_TIM3_Init+0xa4>)
 800094c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800094e:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <MX_TIM3_Init+0xa0>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MX_TIM3_Init+0xa0>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_TIM3_Init+0xa0>)
 800095c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000960:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_TIM3_Init+0xa0>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MX_TIM3_Init+0xa0>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800096e:	2303      	movs	r3, #3
 8000970:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000972:	2302      	movs	r3, #2
 8000974:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000976:	2301      	movs	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000986:	2301      	movs	r3, #1
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <MX_TIM3_Init+0xa0>)
 800099a:	f002 fbab 	bl	80030f4 <HAL_TIM_Encoder_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80009a4:	f000 f982 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_TIM3_Init+0xa0>)
 80009b6:	f002 ffd1 	bl	800395c <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009c0:	f000 f974 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	@ 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200001c8 	.word	0x200001c8
 80009d0:	40000400 	.word	0x40000400

080009d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	@ 0x30
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2224      	movs	r2, #36	@ 0x24
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 f87a 	bl	8003adc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009f0:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <MX_TIM4_Init+0xa0>)
 80009f2:	4a21      	ldr	r2, [pc, #132]	@ (8000a78 <MX_TIM4_Init+0xa4>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <MX_TIM4_Init+0xa0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <MX_TIM4_Init+0xa0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <MX_TIM4_Init+0xa0>)
 8000a04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_TIM4_Init+0xa0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_TIM4_Init+0xa0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a16:	2303      	movs	r3, #3
 8000a18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <MX_TIM4_Init+0xa0>)
 8000a42:	f002 fb57 	bl	80030f4 <HAL_TIM_Encoder_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000a4c:	f000 f92e 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_TIM4_Init+0xa0>)
 8000a5e:	f002 ff7d 	bl	800395c <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000a68:	f000 f920 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3730      	adds	r7, #48	@ 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000210 	.word	0x20000210
 8000a78:	40000800 	.word	0x40000800

08000a7c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]
 8000a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <MX_TIM9_Init+0x98>)
 8000a96:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <MX_TIM9_Init+0x9c>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <MX_TIM9_Init+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <MX_TIM9_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4999;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <MX_TIM9_Init+0x98>)
 8000aa8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000aac:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <MX_TIM9_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MX_TIM9_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000aba:	4816      	ldr	r0, [pc, #88]	@ (8000b14 <MX_TIM9_Init+0x98>)
 8000abc:	f002 fa1a 	bl	8002ef4 <HAL_TIM_PWM_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000ac6:	f000 f8f1 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aca:	2360      	movs	r3, #96	@ 0x60
 8000acc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <MX_TIM9_Init+0x98>)
 8000ae2:	f002 fc3b 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000aec:	f000 f8de 	bl	8000cac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2204      	movs	r2, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	@ (8000b14 <MX_TIM9_Init+0x98>)
 8000af8:	f002 fc30 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8000b02:	f000 f8d3 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000b06:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <MX_TIM9_Init+0x98>)
 8000b08:	f000 fa66 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000258 	.word	0x20000258
 8000b18:	40014000 	.word	0x40014000

08000b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_DMA_Init+0x3c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <MX_DMA_Init+0x3c>)
 8000b2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_DMA_Init+0x3c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2038      	movs	r0, #56	@ 0x38
 8000b44:	f001 f86d 	bl	8001c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b48:	2038      	movs	r0, #56	@ 0x38
 8000b4a:	f001 f886 	bl	8001c5a <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b49      	ldr	r3, [pc, #292]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a48      	ldr	r2, [pc, #288]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b46      	ldr	r3, [pc, #280]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b42      	ldr	r3, [pc, #264]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a41      	ldr	r2, [pc, #260]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b3b      	ldr	r3, [pc, #236]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a3a      	ldr	r2, [pc, #232]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b38      	ldr	r3, [pc, #224]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b34      	ldr	r3, [pc, #208]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a33      	ldr	r2, [pc, #204]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR_4_Pin|IR_3_Pin|IR_2_Pin|IR_1_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	21f0      	movs	r1, #240	@ 0xf0
 8000be6:	482e      	ldr	r0, [pc, #184]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000be8:	f001 fd46 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_5_GPIO_Port, IR_5_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	482c      	ldr	r0, [pc, #176]	@ (8000ca4 <MX_GPIO_Init+0x148>)
 8000bf2:	f001 fd41 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfc:	482a      	ldr	r0, [pc, #168]	@ (8000ca8 <MX_GPIO_Init+0x14c>)
 8000bfe:	f001 fd3b 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IR_4_Pin IR_3_Pin IR_2_Pin IR_1_Pin */
  GPIO_InitStruct.Pin = IR_4_Pin|IR_3_Pin|IR_2_Pin|IR_1_Pin;
 8000c02:	23f0      	movs	r3, #240	@ 0xf0
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4821      	ldr	r0, [pc, #132]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000c1a:	f001 fba9 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_5_Pin */
  GPIO_InitStruct.Pin = IR_5_Pin;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IR_5_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	481b      	ldr	r0, [pc, #108]	@ (8000ca4 <MX_GPIO_Init+0x148>)
 8000c36:	f001 fb9b 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_LED_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin;
 8000c3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_LED_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4815      	ldr	r0, [pc, #84]	@ (8000ca8 <MX_GPIO_Init+0x14c>)
 8000c54:	f001 fb8c 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480e      	ldr	r0, [pc, #56]	@ (8000ca8 <MX_GPIO_Init+0x14c>)
 8000c6e:	f001 fb7f 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c78:	2312      	movs	r3, #18
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c84:	2304      	movs	r3, #4
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <MX_GPIO_Init+0x14c>)
 8000c90:	f001 fb6e 	bl	8002370 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020400 	.word	0x40020400

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a3c      	ldr	r2, [pc, #240]	@ (8000e18 <HAL_ADC_MspInit+0x110>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d171      	bne.n	8000e0e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e1c <HAL_ADC_MspInit+0x114>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a3a      	ldr	r2, [pc, #232]	@ (8000e1c <HAL_ADC_MspInit+0x114>)
 8000d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3a:	4b38      	ldr	r3, [pc, #224]	@ (8000e1c <HAL_ADC_MspInit+0x114>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b34      	ldr	r3, [pc, #208]	@ (8000e1c <HAL_ADC_MspInit+0x114>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a33      	ldr	r2, [pc, #204]	@ (8000e1c <HAL_ADC_MspInit+0x114>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b31      	ldr	r3, [pc, #196]	@ (8000e1c <HAL_ADC_MspInit+0x114>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <HAL_ADC_MspInit+0x114>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000e1c <HAL_ADC_MspInit+0x114>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b2a      	ldr	r3, [pc, #168]	@ (8000e1c <HAL_ADC_MspInit+0x114>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = PT_2_Pin;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d82:	2303      	movs	r3, #3
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PT_2_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4823      	ldr	r0, [pc, #140]	@ (8000e20 <HAL_ADC_MspInit+0x118>)
 8000d92:	f001 faed 	bl	8002370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PT_3_Pin|PT_4_Pin;
 8000d96:	2303      	movs	r3, #3
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	481e      	ldr	r0, [pc, #120]	@ (8000e24 <HAL_ADC_MspInit+0x11c>)
 8000daa:	f001 fae1 	bl	8002370 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000db0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e2c <HAL_ADC_MspInit+0x124>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000dc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dce:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000dd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ddc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dde:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000de4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000df2:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000df4:	f000 ff4c 	bl	8001c90 <HAL_DMA_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000dfe:	f7ff ff55 	bl	8000cac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000e06:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e08:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <HAL_ADC_MspInit+0x120>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40020400 	.word	0x40020400
 8000e28:	20000120 	.word	0x20000120
 8000e2c:	40026410 	.word	0x40026410

08000e30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a15      	ldr	r2, [pc, #84]	@ (8000e94 <HAL_TIM_PWM_MspInit+0x64>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d10e      	bne.n	8000e60 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x68>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	4a13      	ldr	r2, [pc, #76]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x68>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x68>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000e5e:	e012      	b.n	8000e86 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM9)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <HAL_TIM_PWM_MspInit+0x6c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10d      	bne.n	8000e86 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x68>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	4a09      	ldr	r2, [pc, #36]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x68>)
 8000e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7a:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x68>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40010000 	.word	0x40010000
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40014000 	.word	0x40014000

08000ea0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	@ 0x30
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a41      	ldr	r2, [pc, #260]	@ (8000fc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d14a      	bne.n	8000f58 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	4b40      	ldr	r3, [pc, #256]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	4a3f      	ldr	r2, [pc, #252]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	4b39      	ldr	r3, [pc, #228]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a38      	ldr	r2, [pc, #224]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a31      	ldr	r2, [pc, #196]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LE_A_Pin;
 8000f16:	2340      	movs	r3, #64	@ 0x40
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LE_A_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4826      	ldr	r0, [pc, #152]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0x12c>)
 8000f32:	f001 fa1d 	bl	8002370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LE_B_Pin;
 8000f36:	2320      	movs	r3, #32
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LE_B_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481f      	ldr	r0, [pc, #124]	@ (8000fd0 <HAL_TIM_Encoder_MspInit+0x130>)
 8000f52:	f001 fa0d 	bl	8002370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f56:	e030      	b.n	8000fba <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM4)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <HAL_TIM_Encoder_MspInit+0x134>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d12b      	bne.n	8000fba <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RE_A_Pin|RE_B_Pin;
 8000f9a:	23c0      	movs	r3, #192	@ 0xc0
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <HAL_TIM_Encoder_MspInit+0x130>)
 8000fb6:	f001 f9db 	bl	8002370 <HAL_GPIO_Init>
}
 8000fba:	bf00      	nop
 8000fbc:	3730      	adds	r7, #48	@ 0x30
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40000400 	.word	0x40000400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40000800 	.word	0x40000800

08000fd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a24      	ldr	r2, [pc, #144]	@ (8001088 <HAL_TIM_MspPostInit+0xb0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d11f      	bne.n	800103a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b23      	ldr	r3, [pc, #140]	@ (800108c <HAL_TIM_MspPostInit+0xb4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a22      	ldr	r2, [pc, #136]	@ (800108c <HAL_TIM_MspPostInit+0xb4>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <HAL_TIM_MspPostInit+0xb4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RM_1_Pin|RM_2_Pin;
 8001016:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001028:	2301      	movs	r3, #1
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4817      	ldr	r0, [pc, #92]	@ (8001090 <HAL_TIM_MspPostInit+0xb8>)
 8001034:	f001 f99c 	bl	8002370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001038:	e022      	b.n	8001080 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a15      	ldr	r2, [pc, #84]	@ (8001094 <HAL_TIM_MspPostInit+0xbc>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d11d      	bne.n	8001080 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <HAL_TIM_MspPostInit+0xb4>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <HAL_TIM_MspPostInit+0xb4>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6313      	str	r3, [r2, #48]	@ 0x30
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <HAL_TIM_MspPostInit+0xb4>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LM_1_Pin|LM_2_Pin;
 8001060:	230c      	movs	r3, #12
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001070:	2303      	movs	r3, #3
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <HAL_TIM_MspPostInit+0xb8>)
 800107c:	f001 f978 	bl	8002370 <HAL_GPIO_Init>
}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	@ 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40010000 	.word	0x40010000
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	40014000 	.word	0x40014000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <NMI_Handler+0x4>

080010a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <MemManage_Handler+0x4>

080010b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <UsageFault_Handler+0x4>

080010c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ee:	f000 f89b 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010fc:	4802      	ldr	r0, [pc, #8]	@ (8001108 <DMA2_Stream0_IRQHandler+0x10>)
 80010fe:	f000 fecd 	bl	8001e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000120 	.word	0x20000120

0800110c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001168 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001134:	f7ff ffea 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	@ (8001170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	@ (800117c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f002 fcc5 	bl	8003aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fa0f 	bl	8000584 <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001174:	08003b90 	.word	0x08003b90
  ldr r2, =_sbss
 8001178:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800117c:	200002a4 	.word	0x200002a4

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	@ (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 fd2d 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fd7e 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fd45 	bl	8001c76 <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 fd0d 	bl	8001c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	200002a0 	.word	0x200002a0

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200002a0 	.word	0x200002a0

08001268 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e033      	b.n	80012e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fd3e 	bl	8000d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d118      	bne.n	80012d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012ae:	f023 0302 	bic.w	r3, r3, #2
 80012b2:	f043 0202 	orr.w	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 fa58 	bl	8001770 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f023 0303 	bic.w	r3, r3, #3
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80012d6:	e001      	b.n	80012dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_ADC_Start_DMA+0x1e>
 800130a:	2302      	movs	r3, #2
 800130c:	e0ce      	b.n	80014ac <HAL_ADC_Start_DMA+0x1bc>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d018      	beq.n	8001356 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001334:	4b5f      	ldr	r3, [pc, #380]	@ (80014b4 <HAL_ADC_Start_DMA+0x1c4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a5f      	ldr	r2, [pc, #380]	@ (80014b8 <HAL_ADC_Start_DMA+0x1c8>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9a      	lsrs	r2, r3, #18
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001348:	e002      	b.n	8001350 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	3b01      	subs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001364:	d107      	bne.n	8001376 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001374:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b01      	cmp	r3, #1
 8001382:	f040 8086 	bne.w	8001492 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013c4:	d106      	bne.n	80013d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	f023 0206 	bic.w	r2, r3, #6
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80013d2:	e002      	b.n	80013da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013e2:	4b36      	ldr	r3, [pc, #216]	@ (80014bc <HAL_ADC_Start_DMA+0x1cc>)
 80013e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ea:	4a35      	ldr	r2, [pc, #212]	@ (80014c0 <HAL_ADC_Start_DMA+0x1d0>)
 80013ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f2:	4a34      	ldr	r2, [pc, #208]	@ (80014c4 <HAL_ADC_Start_DMA+0x1d4>)
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013fa:	4a33      	ldr	r2, [pc, #204]	@ (80014c8 <HAL_ADC_Start_DMA+0x1d8>)
 80013fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001406:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001416:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001426:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	334c      	adds	r3, #76	@ 0x4c
 8001432:	4619      	mov	r1, r3
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f000 fcd8 	bl	8001dec <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10f      	bne.n	8001468 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d129      	bne.n	80014aa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	e020      	b.n	80014aa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <HAL_ADC_Start_DMA+0x1dc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d11b      	bne.n	80014aa <HAL_ADC_Start_DMA+0x1ba>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d114      	bne.n	80014aa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	e00b      	b.n	80014aa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f043 0210 	orr.w	r2, r3, #16
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000000 	.word	0x20000000
 80014b8:	431bde83 	.word	0x431bde83
 80014bc:	40012300 	.word	0x40012300
 80014c0:	08001969 	.word	0x08001969
 80014c4:	08001a23 	.word	0x08001a23
 80014c8:	08001a3f 	.word	0x08001a3f
 80014cc:	40012000 	.word	0x40012000

080014d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x1c>
 8001524:	2302      	movs	r3, #2
 8001526:	e113      	b.n	8001750 <HAL_ADC_ConfigChannel+0x244>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b09      	cmp	r3, #9
 8001536:	d925      	bls.n	8001584 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68d9      	ldr	r1, [r3, #12]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	3b1e      	subs	r3, #30
 800154e:	2207      	movs	r2, #7
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43da      	mvns	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	400a      	ands	r2, r1
 800155c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68d9      	ldr	r1, [r3, #12]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	4603      	mov	r3, r0
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4403      	add	r3, r0
 8001576:	3b1e      	subs	r3, #30
 8001578:	409a      	lsls	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	e022      	b.n	80015ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6919      	ldr	r1, [r3, #16]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	2207      	movs	r2, #7
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6919      	ldr	r1, [r3, #16]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4403      	add	r3, r0
 80015c0:	409a      	lsls	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d824      	bhi.n	800161c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b05      	subs	r3, #5
 80015e4:	221f      	movs	r2, #31
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	400a      	ands	r2, r1
 80015f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4618      	mov	r0, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b05      	subs	r3, #5
 800160e:	fa00 f203 	lsl.w	r2, r0, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	635a      	str	r2, [r3, #52]	@ 0x34
 800161a:	e04c      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b0c      	cmp	r3, #12
 8001622:	d824      	bhi.n	800166e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b23      	subs	r3, #35	@ 0x23
 8001636:	221f      	movs	r2, #31
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43da      	mvns	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	400a      	ands	r2, r1
 8001644:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3b23      	subs	r3, #35	@ 0x23
 8001660:	fa00 f203 	lsl.w	r2, r0, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	631a      	str	r2, [r3, #48]	@ 0x30
 800166c:	e023      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	3b41      	subs	r3, #65	@ 0x41
 8001680:	221f      	movs	r2, #31
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	400a      	ands	r2, r1
 800168e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	3b41      	subs	r3, #65	@ 0x41
 80016aa:	fa00 f203 	lsl.w	r2, r0, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b6:	4b29      	ldr	r3, [pc, #164]	@ (800175c <HAL_ADC_ConfigChannel+0x250>)
 80016b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a28      	ldr	r2, [pc, #160]	@ (8001760 <HAL_ADC_ConfigChannel+0x254>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d10f      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1d8>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b12      	cmp	r3, #18
 80016ca:	d10b      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001760 <HAL_ADC_ConfigChannel+0x254>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d12b      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x23a>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001764 <HAL_ADC_ConfigChannel+0x258>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d003      	beq.n	8001700 <HAL_ADC_ConfigChannel+0x1f4>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b11      	cmp	r3, #17
 80016fe:	d122      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a11      	ldr	r2, [pc, #68]	@ (8001764 <HAL_ADC_ConfigChannel+0x258>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d111      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <HAL_ADC_ConfigChannel+0x25c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a11      	ldr	r2, [pc, #68]	@ (800176c <HAL_ADC_ConfigChannel+0x260>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	0c9a      	lsrs	r2, r3, #18
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001738:	e002      	b.n	8001740 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3b01      	subs	r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f9      	bne.n	800173a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40012300 	.word	0x40012300
 8001760:	40012000 	.word	0x40012000
 8001764:	10000012 	.word	0x10000012
 8001768:	20000000 	.word	0x20000000
 800176c:	431bde83 	.word	0x431bde83

08001770 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001778:	4b79      	ldr	r3, [pc, #484]	@ (8001960 <ADC_Init+0x1f0>)
 800177a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	431a      	orrs	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6859      	ldr	r1, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	021a      	lsls	r2, r3, #8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80017c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6899      	ldr	r1, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001802:	4a58      	ldr	r2, [pc, #352]	@ (8001964 <ADC_Init+0x1f4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d022      	beq.n	800184e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001816:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6899      	ldr	r1, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001838:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6899      	ldr	r1, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	e00f      	b.n	800186e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800185c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800186c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0202 	bic.w	r2, r2, #2
 800187c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6899      	ldr	r1, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7e1b      	ldrb	r3, [r3, #24]
 8001888:	005a      	lsls	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6859      	ldr	r1, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	3b01      	subs	r3, #1
 80018c8:	035a      	lsls	r2, r3, #13
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	e007      	b.n	80018e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	3b01      	subs	r3, #1
 8001900:	051a      	lsls	r2, r3, #20
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001918:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6899      	ldr	r1, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001926:	025a      	lsls	r2, r3, #9
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800193e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6899      	ldr	r1, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	029a      	lsls	r2, r3, #10
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	609a      	str	r2, [r3, #8]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	40012300 	.word	0x40012300
 8001964:	0f000001 	.word	0x0f000001

08001968 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001974:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800197e:	2b00      	cmp	r3, #0
 8001980:	d13c      	bne.n	80019fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d12b      	bne.n	80019f4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d127      	bne.n	80019f4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d119      	bne.n	80019f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0220 	bic.w	r2, r2, #32
 80019ce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fd6b 	bl	80014d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019fa:	e00e      	b.n	8001a1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff fd75 	bl	80014f8 <HAL_ADC_ErrorCallback>
}
 8001a0e:	e004      	b.n	8001a1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a2e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7ff fd57 	bl	80014e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2240      	movs	r2, #64	@ 0x40
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f043 0204 	orr.w	r2, r3, #4
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f7ff fd4a 	bl	80014f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4907      	ldr	r1, [pc, #28]	@ (8001b08 <__NVIC_EnableIRQ+0x38>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	@ (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	@ (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	@ 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd8:	d301      	bcc.n	8001bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <SysTick_Config+0x40>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be6:	210f      	movs	r1, #15
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f7ff ff8e 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <SysTick_Config+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <SysTick_Config+0x40>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff29 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff3e 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff8e 	bl	8001b60 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff5d 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff31 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ffa2 	bl	8001bc8 <SysTick_Config>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff fad8 	bl	8001250 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e099      	b.n	8001de0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ccc:	e00f      	b.n	8001cee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cce:	f7ff fabf 	bl	8001250 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d908      	bls.n	8001cee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e078      	b.n	8001de0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e8      	bne.n	8001cce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4b38      	ldr	r3, [pc, #224]	@ (8001de8 <HAL_DMA_Init+0x158>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d107      	bne.n	8001d58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d50:	4313      	orrs	r3, r2
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f023 0307 	bic.w	r3, r3, #7
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d117      	bne.n	8001db2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00e      	beq.n	8001db2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fa6f 	bl	8002278 <DMA_CheckFifoParam>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2240      	movs	r2, #64	@ 0x40
 8001da4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dae:	2301      	movs	r3, #1
 8001db0:	e016      	b.n	8001de0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fa26 	bl	800220c <DMA_CalcBaseAndBitshift>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc8:	223f      	movs	r2, #63	@ 0x3f
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	f010803f 	.word	0xf010803f

08001dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_DMA_Start_IT+0x26>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e040      	b.n	8001e94 <HAL_DMA_Start_IT+0xa8>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d12f      	bne.n	8001e86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f9b8 	bl	80021b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e44:	223f      	movs	r2, #63	@ 0x3f
 8001e46:	409a      	lsls	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0216 	orr.w	r2, r2, #22
 8001e5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0208 	orr.w	r2, r2, #8
 8001e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e005      	b.n	8001e92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ea8:	4b8e      	ldr	r3, [pc, #568]	@ (80020e4 <HAL_DMA_IRQHandler+0x248>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a8e      	ldr	r2, [pc, #568]	@ (80020e8 <HAL_DMA_IRQHandler+0x24c>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0a9b      	lsrs	r3, r3, #10
 8001eb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01a      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0204 	bic.w	r2, r2, #4
 8001eee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d012      	beq.n	8001f3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f36:	f043 0202 	orr.w	r2, r3, #2
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	2204      	movs	r2, #4
 8001f44:	409a      	lsls	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d012      	beq.n	8001f74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00b      	beq.n	8001f74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f60:	2204      	movs	r2, #4
 8001f62:	409a      	lsls	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6c:	f043 0204 	orr.w	r2, r3, #4
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	2210      	movs	r2, #16
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d043      	beq.n	800200c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d03c      	beq.n	800200c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	2210      	movs	r2, #16
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d018      	beq.n	8001fde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d108      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d024      	beq.n	800200c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
 8001fca:	e01f      	b.n	800200c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01b      	beq.n	800200c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
 8001fdc:	e016      	b.n	800200c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0208 	bic.w	r2, r2, #8
 8001ffa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002010:	2220      	movs	r2, #32
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 808f 	beq.w	800213c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8087 	beq.w	800213c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002032:	2220      	movs	r2, #32
 8002034:	409a      	lsls	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b05      	cmp	r3, #5
 8002044:	d136      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0216 	bic.w	r2, r2, #22
 8002054:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002064:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d103      	bne.n	8002076 <HAL_DMA_IRQHandler+0x1da>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0208 	bic.w	r2, r2, #8
 8002084:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208a:	223f      	movs	r2, #63	@ 0x3f
 800208c:	409a      	lsls	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d07e      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
        }
        return;
 80020b2:	e079      	b.n	80021a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01d      	beq.n	80020fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10d      	bne.n	80020ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d031      	beq.n	800213c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
 80020e0:	e02c      	b.n	800213c <HAL_DMA_IRQHandler+0x2a0>
 80020e2:	bf00      	nop
 80020e4:	20000000 	.word	0x20000000
 80020e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d023      	beq.n	800213c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
 80020fc:	e01e      	b.n	800213c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10f      	bne.n	800212c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0210 	bic.w	r2, r2, #16
 800211a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002140:	2b00      	cmp	r3, #0
 8002142:	d032      	beq.n	80021aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d022      	beq.n	8002196 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2205      	movs	r2, #5
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	3301      	adds	r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	d307      	bcc.n	8002184 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f2      	bne.n	8002168 <HAL_DMA_IRQHandler+0x2cc>
 8002182:	e000      	b.n	8002186 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002184:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
 80021a6:	e000      	b.n	80021aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80021a8:	bf00      	nop
    }
  }
}
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80021cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b40      	cmp	r3, #64	@ 0x40
 80021dc:	d108      	bne.n	80021f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021ee:	e007      	b.n	8002200 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	60da      	str	r2, [r3, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3b10      	subs	r3, #16
 800221c:	4a14      	ldr	r2, [pc, #80]	@ (8002270 <DMA_CalcBaseAndBitshift+0x64>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002226:	4a13      	ldr	r2, [pc, #76]	@ (8002274 <DMA_CalcBaseAndBitshift+0x68>)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d909      	bls.n	800224e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002242:	f023 0303 	bic.w	r3, r3, #3
 8002246:	1d1a      	adds	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	659a      	str	r2, [r3, #88]	@ 0x58
 800224c:	e007      	b.n	800225e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	aaaaaaab 	.word	0xaaaaaaab
 8002274:	08003b78 	.word	0x08003b78

08002278 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11f      	bne.n	80022d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d856      	bhi.n	8002346 <DMA_CheckFifoParam+0xce>
 8002298:	a201      	add	r2, pc, #4	@ (adr r2, 80022a0 <DMA_CheckFifoParam+0x28>)
 800229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229e:	bf00      	nop
 80022a0:	080022b1 	.word	0x080022b1
 80022a4:	080022c3 	.word	0x080022c3
 80022a8:	080022b1 	.word	0x080022b1
 80022ac:	08002347 	.word	0x08002347
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d046      	beq.n	800234a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c0:	e043      	b.n	800234a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022ca:	d140      	bne.n	800234e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d0:	e03d      	b.n	800234e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022da:	d121      	bne.n	8002320 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d837      	bhi.n	8002352 <DMA_CheckFifoParam+0xda>
 80022e2:	a201      	add	r2, pc, #4	@ (adr r2, 80022e8 <DMA_CheckFifoParam+0x70>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	080022ff 	.word	0x080022ff
 80022f0:	080022f9 	.word	0x080022f9
 80022f4:	08002311 	.word	0x08002311
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      break;
 80022fc:	e030      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d025      	beq.n	8002356 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230e:	e022      	b.n	8002356 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002318:	d11f      	bne.n	800235a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800231e:	e01c      	b.n	800235a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d903      	bls.n	800232e <DMA_CheckFifoParam+0xb6>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d003      	beq.n	8002334 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800232c:	e018      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
      break;
 8002332:	e015      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002338:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00e      	beq.n	800235e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e00b      	b.n	800235e <DMA_CheckFifoParam+0xe6>
      break;
 8002346:	bf00      	nop
 8002348:	e00a      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e008      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 800234e:	bf00      	nop
 8002350:	e006      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 8002352:	bf00      	nop
 8002354:	e004      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 8002356:	bf00      	nop
 8002358:	e002      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;   
 800235a:	bf00      	nop
 800235c:	e000      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 800235e:	bf00      	nop
    }
  } 
  
  return status; 
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	e159      	b.n	8002640 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800238c:	2201      	movs	r2, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	f040 8148 	bne.w	800263a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d005      	beq.n	80023c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d130      	bne.n	8002424 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	2203      	movs	r2, #3
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f8:	2201      	movs	r2, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 0201 	and.w	r2, r3, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b03      	cmp	r3, #3
 800242e:	d017      	beq.n	8002460 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d123      	bne.n	80024b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	220f      	movs	r2, #15
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	08da      	lsrs	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3208      	adds	r2, #8
 80024ae:	69b9      	ldr	r1, [r7, #24]
 80024b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0203 	and.w	r2, r3, #3
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a2 	beq.w	800263a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b57      	ldr	r3, [pc, #348]	@ (8002658 <HAL_GPIO_Init+0x2e8>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	4a56      	ldr	r2, [pc, #344]	@ (8002658 <HAL_GPIO_Init+0x2e8>)
 8002500:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002504:	6453      	str	r3, [r2, #68]	@ 0x44
 8002506:	4b54      	ldr	r3, [pc, #336]	@ (8002658 <HAL_GPIO_Init+0x2e8>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002512:	4a52      	ldr	r2, [pc, #328]	@ (800265c <HAL_GPIO_Init+0x2ec>)
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a49      	ldr	r2, [pc, #292]	@ (8002660 <HAL_GPIO_Init+0x2f0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d019      	beq.n	8002572 <HAL_GPIO_Init+0x202>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a48      	ldr	r2, [pc, #288]	@ (8002664 <HAL_GPIO_Init+0x2f4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0x1fe>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a47      	ldr	r2, [pc, #284]	@ (8002668 <HAL_GPIO_Init+0x2f8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00d      	beq.n	800256a <HAL_GPIO_Init+0x1fa>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a46      	ldr	r2, [pc, #280]	@ (800266c <HAL_GPIO_Init+0x2fc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <HAL_GPIO_Init+0x1f6>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a45      	ldr	r2, [pc, #276]	@ (8002670 <HAL_GPIO_Init+0x300>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_GPIO_Init+0x1f2>
 800255e:	2304      	movs	r3, #4
 8002560:	e008      	b.n	8002574 <HAL_GPIO_Init+0x204>
 8002562:	2307      	movs	r3, #7
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x204>
 8002566:	2303      	movs	r3, #3
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x204>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x204>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x204>
 8002572:	2300      	movs	r3, #0
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002584:	4935      	ldr	r1, [pc, #212]	@ (800265c <HAL_GPIO_Init+0x2ec>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002592:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <HAL_GPIO_Init+0x304>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002674 <HAL_GPIO_Init+0x304>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <HAL_GPIO_Init+0x304>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e0:	4a24      	ldr	r2, [pc, #144]	@ (8002674 <HAL_GPIO_Init+0x304>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e6:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <HAL_GPIO_Init+0x304>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260a:	4a1a      	ldr	r2, [pc, #104]	@ (8002674 <HAL_GPIO_Init+0x304>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <HAL_GPIO_Init+0x304>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002634:	4a0f      	ldr	r2, [pc, #60]	@ (8002674 <HAL_GPIO_Init+0x304>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	f67f aea2 	bls.w	800238c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40013800 	.word	0x40013800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020800 	.word	0x40020800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40013c00 	.word	0x40013c00

08002678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
 8002684:	4613      	mov	r3, r2
 8002686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002688:	787b      	ldrb	r3, [r7, #1]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002694:	e003      	b.n	800269e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	041a      	lsls	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	619a      	str	r2, [r3, #24]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e267      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d075      	beq.n	80027b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ca:	4b88      	ldr	r3, [pc, #544]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d00c      	beq.n	80026f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d6:	4b85      	ldr	r3, [pc, #532]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d112      	bne.n	8002708 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4b82      	ldr	r3, [pc, #520]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ee:	d10b      	bne.n	8002708 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	4b7e      	ldr	r3, [pc, #504]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d05b      	beq.n	80027b4 <HAL_RCC_OscConfig+0x108>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d157      	bne.n	80027b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e242      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002710:	d106      	bne.n	8002720 <HAL_RCC_OscConfig+0x74>
 8002712:	4b76      	ldr	r3, [pc, #472]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a75      	ldr	r2, [pc, #468]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e01d      	b.n	800275c <HAL_RCC_OscConfig+0xb0>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x98>
 800272a:	4b70      	ldr	r3, [pc, #448]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6f      	ldr	r2, [pc, #444]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b6d      	ldr	r3, [pc, #436]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6c      	ldr	r2, [pc, #432]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0xb0>
 8002744:	4b69      	ldr	r3, [pc, #420]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a68      	ldr	r2, [pc, #416]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b66      	ldr	r3, [pc, #408]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a65      	ldr	r2, [pc, #404]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe fd74 	bl	8001250 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe fd70 	bl	8001250 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	@ 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e207      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b5b      	ldr	r3, [pc, #364]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0xc0>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fd60 	bl	8001250 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe fd5c 	bl	8001250 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e1f3      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a6:	4b51      	ldr	r3, [pc, #324]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0xe8>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d063      	beq.n	800288a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027c2:	4b4a      	ldr	r3, [pc, #296]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ce:	4b47      	ldr	r3, [pc, #284]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d11c      	bne.n	8002814 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b44      	ldr	r3, [pc, #272]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d116      	bne.n	8002814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	4b41      	ldr	r3, [pc, #260]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_RCC_OscConfig+0x152>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e1c7      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b3b      	ldr	r3, [pc, #236]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4937      	ldr	r1, [pc, #220]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002812:	e03a      	b.n	800288a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281c:	4b34      	ldr	r3, [pc, #208]	@ (80028f0 <HAL_RCC_OscConfig+0x244>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7fe fd15 	bl	8001250 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282a:	f7fe fd11 	bl	8001250 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e1a8      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	4b2b      	ldr	r3, [pc, #172]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002848:	4b28      	ldr	r3, [pc, #160]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4925      	ldr	r1, [pc, #148]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
 800285c:	e015      	b.n	800288a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285e:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <HAL_RCC_OscConfig+0x244>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fcf4 	bl	8001250 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286c:	f7fe fcf0 	bl	8001250 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e187      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d036      	beq.n	8002904 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289e:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <HAL_RCC_OscConfig+0x248>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7fe fcd4 	bl	8001250 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ac:	f7fe fcd0 	bl	8001250 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e167      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <HAL_RCC_OscConfig+0x240>)
 80028c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x200>
 80028ca:	e01b      	b.n	8002904 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_RCC_OscConfig+0x248>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d2:	f7fe fcbd 	bl	8001250 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	e00e      	b.n	80028f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028da:	f7fe fcb9 	bl	8001250 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d907      	bls.n	80028f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e150      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
 80028ec:	40023800 	.word	0x40023800
 80028f0:	42470000 	.word	0x42470000
 80028f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	4b88      	ldr	r3, [pc, #544]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1ea      	bne.n	80028da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8097 	beq.w	8002a40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002916:	4b81      	ldr	r3, [pc, #516]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10f      	bne.n	8002942 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	4b7d      	ldr	r3, [pc, #500]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	@ 0x40
 8002932:	4b7a      	ldr	r3, [pc, #488]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002942:	4b77      	ldr	r3, [pc, #476]	@ (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d118      	bne.n	8002980 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294e:	4b74      	ldr	r3, [pc, #464]	@ (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a73      	ldr	r2, [pc, #460]	@ (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295a:	f7fe fc79 	bl	8001250 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002962:	f7fe fc75 	bl	8001250 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e10c      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b6a      	ldr	r3, [pc, #424]	@ (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x2ea>
 8002988:	4b64      	ldr	r3, [pc, #400]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298c:	4a63      	ldr	r2, [pc, #396]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	@ 0x70
 8002994:	e01c      	b.n	80029d0 <HAL_RCC_OscConfig+0x324>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x30c>
 800299e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029aa:	4b5c      	ldr	r3, [pc, #368]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	4a5b      	ldr	r2, [pc, #364]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0x324>
 80029b8:	4b58      	ldr	r3, [pc, #352]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	4a57      	ldr	r2, [pc, #348]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c4:	4b55      	ldr	r3, [pc, #340]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c8:	4a54      	ldr	r2, [pc, #336]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 0304 	bic.w	r3, r3, #4
 80029ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7fe fc3a 	bl	8001250 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe fc36 	bl	8001250 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0cb      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ee      	beq.n	80029e0 <HAL_RCC_OscConfig+0x334>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a04:	f7fe fc24 	bl	8001250 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fc20 	bl	8001250 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e0b5      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a22:	4b3e      	ldr	r3, [pc, #248]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ee      	bne.n	8002a0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a34:	4b39      	ldr	r3, [pc, #228]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	4a38      	ldr	r2, [pc, #224]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80a1 	beq.w	8002b8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d05c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d141      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <HAL_RCC_OscConfig+0x478>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe fbf4 	bl	8001250 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fbf0 	bl	8001250 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e087      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	4b27      	ldr	r3, [pc, #156]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	491b      	ldr	r1, [pc, #108]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x478>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe fbc9 	bl	8001250 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fbc5 	bl	8001250 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e05c      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad4:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x416>
 8002ae0:	e054      	b.n	8002b8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <HAL_RCC_OscConfig+0x478>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fbb2 	bl	8001250 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe fbae 	bl	8001250 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e045      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x444>
 8002b0e:	e03d      	b.n	8002b8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e038      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40007000 	.word	0x40007000
 8002b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <HAL_RCC_OscConfig+0x4ec>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d028      	beq.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d121      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d11a      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d111      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	3b01      	subs	r3, #1
 8002b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800

08002b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0cc      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b68      	ldr	r3, [pc, #416]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d90c      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b65      	ldr	r3, [pc, #404]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b63      	ldr	r3, [pc, #396]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0b8      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf0:	4b59      	ldr	r3, [pc, #356]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4a58      	ldr	r2, [pc, #352]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c08:	4b53      	ldr	r3, [pc, #332]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a52      	ldr	r2, [pc, #328]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b50      	ldr	r3, [pc, #320]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	494d      	ldr	r1, [pc, #308]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d044      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b47      	ldr	r3, [pc, #284]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d119      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e07f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e067      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7a:	4b37      	ldr	r3, [pc, #220]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0203 	bic.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4934      	ldr	r1, [pc, #208]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c8c:	f7fe fae0 	bl	8001250 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7fe fadc 	bl	8001250 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e04f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 020c 	and.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1eb      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b25      	ldr	r3, [pc, #148]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d20c      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b22      	ldr	r3, [pc, #136]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b20      	ldr	r3, [pc, #128]	@ (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e032      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4916      	ldr	r1, [pc, #88]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0e:	4b12      	ldr	r3, [pc, #72]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	490e      	ldr	r1, [pc, #56]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d22:	f000 f821 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8002d26:	4602      	mov	r2, r0
 8002d28:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	490a      	ldr	r1, [pc, #40]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	5ccb      	ldrb	r3, [r1, r3]
 8002d36:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3a:	4a09      	ldr	r2, [pc, #36]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d3e:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fa40 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023c00 	.word	0x40023c00
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08003b68 	.word	0x08003b68
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000004 	.word	0x20000004

08002d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d6c:	b090      	sub	sp, #64	@ 0x40
 8002d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d74:	2300      	movs	r3, #0
 8002d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d78:	2300      	movs	r3, #0
 8002d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d80:	4b59      	ldr	r3, [pc, #356]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d00d      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x40>
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	f200 80a1 	bhi.w	8002ed4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x34>
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d003      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d9a:	e09b      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x184>)
 8002d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002da0:	e09b      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da2:	4b53      	ldr	r3, [pc, #332]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002da6:	e098      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002db0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d028      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	099b      	lsrs	r3, r3, #6
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4b47      	ldr	r3, [pc, #284]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dd4:	fb03 f201 	mul.w	r2, r3, r1
 8002dd8:	2300      	movs	r3, #0
 8002dda:	fb00 f303 	mul.w	r3, r0, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	4a43      	ldr	r2, [pc, #268]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002de2:	fba0 1202 	umull	r1, r2, r0, r2
 8002de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002de8:	460a      	mov	r2, r1
 8002dea:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dee:	4413      	add	r3, r2
 8002df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df4:	2200      	movs	r2, #0
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	61fa      	str	r2, [r7, #28]
 8002dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e02:	f7fd f9e9 	bl	80001d8 <__aeabi_uldivmod>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e0e:	e053      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e10:	4b35      	ldr	r3, [pc, #212]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	2200      	movs	r2, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	617a      	str	r2, [r7, #20]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e22:	f04f 0b00 	mov.w	fp, #0
 8002e26:	4652      	mov	r2, sl
 8002e28:	465b      	mov	r3, fp
 8002e2a:	f04f 0000 	mov.w	r0, #0
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	0159      	lsls	r1, r3, #5
 8002e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e38:	0150      	lsls	r0, r2, #5
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	ebb2 080a 	subs.w	r8, r2, sl
 8002e42:	eb63 090b 	sbc.w	r9, r3, fp
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e5a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e5e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	00eb      	lsls	r3, r5, #3
 8002e6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e70:	00e2      	lsls	r2, r4, #3
 8002e72:	4614      	mov	r4, r2
 8002e74:	461d      	mov	r5, r3
 8002e76:	eb14 030a 	adds.w	r3, r4, sl
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	eb45 030b 	adc.w	r3, r5, fp
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e8e:	4629      	mov	r1, r5
 8002e90:	028b      	lsls	r3, r1, #10
 8002e92:	4621      	mov	r1, r4
 8002e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e98:	4621      	mov	r1, r4
 8002e9a:	028a      	lsls	r2, r1, #10
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	60fa      	str	r2, [r7, #12]
 8002ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eac:	f7fd f994 	bl	80001d8 <__aeabi_uldivmod>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002ec8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ed2:	e002      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x184>)
 8002ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3740      	adds	r7, #64	@ 0x40
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	00f42400 	.word	0x00f42400
 8002ef0:	016e3600 	.word	0x016e3600

08002ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e041      	b.n	8002f8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd ff88 	bl	8000e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f000 fad4 	bl	80034e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_TIM_PWM_Start+0x24>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e022      	b.n	8002ffe <HAL_TIM_PWM_Start+0x6a>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d109      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0x3e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e015      	b.n	8002ffe <HAL_TIM_PWM_Start+0x6a>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d109      	bne.n	8002fec <HAL_TIM_PWM_Start+0x58>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e008      	b.n	8002ffe <HAL_TIM_PWM_Start+0x6a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e068      	b.n	80030d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <HAL_TIM_PWM_Start+0x82>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003014:	e013      	b.n	800303e <HAL_TIM_PWM_Start+0xaa>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d104      	bne.n	8003026 <HAL_TIM_PWM_Start+0x92>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003024:	e00b      	b.n	800303e <HAL_TIM_PWM_Start+0xaa>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start+0xa2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003034:	e003      	b.n	800303e <HAL_TIM_PWM_Start+0xaa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fc62 	bl	8003910 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a23      	ldr	r2, [pc, #140]	@ (80030e0 <HAL_TIM_PWM_Start+0x14c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d107      	bne.n	8003066 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1d      	ldr	r2, [pc, #116]	@ (80030e0 <HAL_TIM_PWM_Start+0x14c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d018      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x10e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003078:	d013      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x10e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <HAL_TIM_PWM_Start+0x150>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00e      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x10e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a17      	ldr	r2, [pc, #92]	@ (80030e8 <HAL_TIM_PWM_Start+0x154>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d009      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x10e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a16      	ldr	r2, [pc, #88]	@ (80030ec <HAL_TIM_PWM_Start+0x158>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x10e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a14      	ldr	r2, [pc, #80]	@ (80030f0 <HAL_TIM_PWM_Start+0x15c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d111      	bne.n	80030c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b06      	cmp	r3, #6
 80030b2:	d010      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c4:	e007      	b.n	80030d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40000c00 	.word	0x40000c00
 80030f0:	40014000 	.word	0x40014000

080030f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e097      	b.n	8003238 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fd febf 	bl	8000ea0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003138:	f023 0307 	bic.w	r3, r3, #7
 800313c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f000 f9c9 	bl	80034e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	4313      	orrs	r3, r2
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003194:	f023 030c 	bic.w	r3, r3, #12
 8003198:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	4313      	orrs	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	011a      	lsls	r2, r3, #4
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	031b      	lsls	r3, r3, #12
 80031c4:	4313      	orrs	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80031da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	4313      	orrs	r3, r2
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003250:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003258:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003260:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003268:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d110      	bne.n	8003292 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d102      	bne.n	800327c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003276:	7b7b      	ldrb	r3, [r7, #13]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e069      	b.n	8003354 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003290:	e031      	b.n	80032f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d110      	bne.n	80032ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003298:	7bbb      	ldrb	r3, [r7, #14]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d102      	bne.n	80032a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800329e:	7b3b      	ldrb	r3, [r7, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d001      	beq.n	80032a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e055      	b.n	8003354 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032b8:	e01d      	b.n	80032f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d108      	bne.n	80032d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032c0:	7bbb      	ldrb	r3, [r7, #14]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d105      	bne.n	80032d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032c6:	7b7b      	ldrb	r3, [r7, #13]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d102      	bne.n	80032d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032cc:	7b3b      	ldrb	r3, [r7, #12]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d001      	beq.n	80032d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e03e      	b.n	8003354 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_TIM_Encoder_Start+0xc4>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d008      	beq.n	8003314 <HAL_TIM_Encoder_Start+0xd4>
 8003302:	e00f      	b.n	8003324 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f000 faff 	bl	8003910 <TIM_CCxChannelCmd>
      break;
 8003312:	e016      	b.n	8003342 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	2104      	movs	r1, #4
 800331c:	4618      	mov	r0, r3
 800331e:	f000 faf7 	bl	8003910 <TIM_CCxChannelCmd>
      break;
 8003322:	e00e      	b.n	8003342 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2201      	movs	r2, #1
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f000 faef 	bl	8003910 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2201      	movs	r2, #1
 8003338:	2104      	movs	r1, #4
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fae8 	bl	8003910 <TIM_CCxChannelCmd>
      break;
 8003340:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003376:	2302      	movs	r3, #2
 8003378:	e0ae      	b.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	f200 809f 	bhi.w	80034c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800338a:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033c5 	.word	0x080033c5
 8003394:	080034c9 	.word	0x080034c9
 8003398:	080034c9 	.word	0x080034c9
 800339c:	080034c9 	.word	0x080034c9
 80033a0:	08003405 	.word	0x08003405
 80033a4:	080034c9 	.word	0x080034c9
 80033a8:	080034c9 	.word	0x080034c9
 80033ac:	080034c9 	.word	0x080034c9
 80033b0:	08003447 	.word	0x08003447
 80033b4:	080034c9 	.word	0x080034c9
 80033b8:	080034c9 	.word	0x080034c9
 80033bc:	080034c9 	.word	0x080034c9
 80033c0:	08003487 	.word	0x08003487
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f914 	bl	80035f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0208 	orr.w	r2, r2, #8
 80033de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0204 	bic.w	r2, r2, #4
 80033ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6999      	ldr	r1, [r3, #24]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	619a      	str	r2, [r3, #24]
      break;
 8003402:	e064      	b.n	80034ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f95a 	bl	80036c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800341e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6999      	ldr	r1, [r3, #24]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	021a      	lsls	r2, r3, #8
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	619a      	str	r2, [r3, #24]
      break;
 8003444:	e043      	b.n	80034ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f9a5 	bl	800379c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0208 	orr.w	r2, r2, #8
 8003460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0204 	bic.w	r2, r2, #4
 8003470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69d9      	ldr	r1, [r3, #28]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	61da      	str	r2, [r3, #28]
      break;
 8003484:	e023      	b.n	80034ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	4618      	mov	r0, r3
 800348e:	f000 f9ef 	bl	8003870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69d9      	ldr	r1, [r3, #28]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	021a      	lsls	r2, r3, #8
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	61da      	str	r2, [r3, #28]
      break;
 80034c6:	e002      	b.n	80034ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
      break;
 80034cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3a      	ldr	r2, [pc, #232]	@ (80035dc <TIM_Base_SetConfig+0xfc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00f      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fe:	d00b      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a37      	ldr	r2, [pc, #220]	@ (80035e0 <TIM_Base_SetConfig+0x100>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a36      	ldr	r2, [pc, #216]	@ (80035e4 <TIM_Base_SetConfig+0x104>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0x38>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a35      	ldr	r2, [pc, #212]	@ (80035e8 <TIM_Base_SetConfig+0x108>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d108      	bne.n	800352a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2b      	ldr	r2, [pc, #172]	@ (80035dc <TIM_Base_SetConfig+0xfc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01b      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003538:	d017      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a28      	ldr	r2, [pc, #160]	@ (80035e0 <TIM_Base_SetConfig+0x100>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a27      	ldr	r2, [pc, #156]	@ (80035e4 <TIM_Base_SetConfig+0x104>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00f      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a26      	ldr	r2, [pc, #152]	@ (80035e8 <TIM_Base_SetConfig+0x108>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a25      	ldr	r2, [pc, #148]	@ (80035ec <TIM_Base_SetConfig+0x10c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a24      	ldr	r2, [pc, #144]	@ (80035f0 <TIM_Base_SetConfig+0x110>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a23      	ldr	r2, [pc, #140]	@ (80035f4 <TIM_Base_SetConfig+0x114>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d108      	bne.n	800357c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0e      	ldr	r2, [pc, #56]	@ (80035dc <TIM_Base_SetConfig+0xfc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d103      	bne.n	80035b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d105      	bne.n	80035ce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f023 0201 	bic.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	611a      	str	r2, [r3, #16]
  }
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40000c00 	.word	0x40000c00
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800

080035f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f023 0201 	bic.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 0302 	bic.w	r3, r3, #2
 8003640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1c      	ldr	r2, [pc, #112]	@ (80036c0 <TIM_OC1_SetConfig+0xc8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10c      	bne.n	800366e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0308 	bic.w	r3, r3, #8
 800365a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a13      	ldr	r2, [pc, #76]	@ (80036c0 <TIM_OC1_SetConfig+0xc8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d111      	bne.n	800369a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800367c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	621a      	str	r2, [r3, #32]
}
 80036b4:	bf00      	nop
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	40010000 	.word	0x40010000

080036c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 0210 	bic.w	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0320 	bic.w	r3, r3, #32
 800370e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a1e      	ldr	r2, [pc, #120]	@ (8003798 <TIM_OC2_SetConfig+0xd4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d10d      	bne.n	8003740 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800372a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800373e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <TIM_OC2_SetConfig+0xd4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d113      	bne.n	8003770 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800374e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000

0800379c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0303 	bic.w	r3, r3, #3
 80037d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a1d      	ldr	r2, [pc, #116]	@ (800386c <TIM_OC3_SetConfig+0xd0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10d      	bne.n	8003816 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a14      	ldr	r2, [pc, #80]	@ (800386c <TIM_OC3_SetConfig+0xd0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d113      	bne.n	8003846 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800382c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	621a      	str	r2, [r3, #32]
}
 8003860:	bf00      	nop
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40010000 	.word	0x40010000

08003870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800389e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	031b      	lsls	r3, r3, #12
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a10      	ldr	r2, [pc, #64]	@ (800390c <TIM_OC4_SetConfig+0x9c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d109      	bne.n	80038e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000

08003910 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2201      	movs	r2, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1a      	ldr	r2, [r3, #32]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	43db      	mvns	r3, r3
 8003932:	401a      	ands	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	fa01 f303 	lsl.w	r3, r1, r3
 8003948:	431a      	orrs	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003970:	2302      	movs	r3, #2
 8003972:	e050      	b.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d018      	beq.n	80039ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c0:	d013      	beq.n	80039ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a18      	ldr	r2, [pc, #96]	@ (8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00e      	beq.n	80039ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a16      	ldr	r2, [pc, #88]	@ (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d009      	beq.n	80039ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a15      	ldr	r2, [pc, #84]	@ (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d004      	beq.n	80039ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a13      	ldr	r2, [pc, #76]	@ (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d10c      	bne.n	8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40014000 	.word	0x40014000

08003a38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e03d      	b.n	8003ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <memset>:
 8003adc:	4402      	add	r2, r0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <memset+0xa>
 8003ae4:	4770      	bx	lr
 8003ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aea:	e7f9      	b.n	8003ae0 <memset+0x4>

08003aec <__libc_init_array>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4d0d      	ldr	r5, [pc, #52]	@ (8003b24 <__libc_init_array+0x38>)
 8003af0:	4c0d      	ldr	r4, [pc, #52]	@ (8003b28 <__libc_init_array+0x3c>)
 8003af2:	1b64      	subs	r4, r4, r5
 8003af4:	10a4      	asrs	r4, r4, #2
 8003af6:	2600      	movs	r6, #0
 8003af8:	42a6      	cmp	r6, r4
 8003afa:	d109      	bne.n	8003b10 <__libc_init_array+0x24>
 8003afc:	4d0b      	ldr	r5, [pc, #44]	@ (8003b2c <__libc_init_array+0x40>)
 8003afe:	4c0c      	ldr	r4, [pc, #48]	@ (8003b30 <__libc_init_array+0x44>)
 8003b00:	f000 f826 	bl	8003b50 <_init>
 8003b04:	1b64      	subs	r4, r4, r5
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	2600      	movs	r6, #0
 8003b0a:	42a6      	cmp	r6, r4
 8003b0c:	d105      	bne.n	8003b1a <__libc_init_array+0x2e>
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
 8003b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b14:	4798      	blx	r3
 8003b16:	3601      	adds	r6, #1
 8003b18:	e7ee      	b.n	8003af8 <__libc_init_array+0xc>
 8003b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1e:	4798      	blx	r3
 8003b20:	3601      	adds	r6, #1
 8003b22:	e7f2      	b.n	8003b0a <__libc_init_array+0x1e>
 8003b24:	08003b88 	.word	0x08003b88
 8003b28:	08003b88 	.word	0x08003b88
 8003b2c:	08003b88 	.word	0x08003b88
 8003b30:	08003b8c 	.word	0x08003b8c

08003b34 <memcpy>:
 8003b34:	440a      	add	r2, r1
 8003b36:	4291      	cmp	r1, r2
 8003b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b3c:	d100      	bne.n	8003b40 <memcpy+0xc>
 8003b3e:	4770      	bx	lr
 8003b40:	b510      	push	{r4, lr}
 8003b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b4a:	4291      	cmp	r1, r2
 8003b4c:	d1f9      	bne.n	8003b42 <memcpy+0xe>
 8003b4e:	bd10      	pop	{r4, pc}

08003b50 <_init>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr

08003b5c <_fini>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr
