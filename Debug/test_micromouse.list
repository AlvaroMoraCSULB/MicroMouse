
test_micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c64  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003dfc  08003dfc  00004dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e14  08003e14  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e14  08003e14  00004e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e1c  08003e1c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e1c  08003e1c  00004e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e20  08003e20  00004e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e24  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000000c  08003e30  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08003e30  000052b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa5f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afa  00000000  00000000  0000fa9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00011598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ac  00000000  00000000  000120c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166e6  00000000  00000000  00012974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c960  00000000  00000000  0002905a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094019  00000000  00000000  000359ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c99d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f0c  00000000  00000000  000c9a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000cc924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003de4 	.word	0x08003de4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003de4 	.word	0x08003de4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <DistanceInit>:
static uint32_t ADCValue[3];

ADC_HandleTypeDef adc;
DMA_HandleTypeDef dma;

void DistanceInit(ADC_HandleTypeDef *_adc, DMA_HandleTypeDef *_dma){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
	adc = *_adc;
 80004d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <DistanceInit+0x48>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4610      	mov	r0, r2
 80004d8:	4619      	mov	r1, r3
 80004da:	2348      	movs	r3, #72	@ 0x48
 80004dc:	461a      	mov	r2, r3
 80004de:	f003 fc73 	bl	8003dc8 <memcpy>
	dma = *_dma;
 80004e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000514 <DistanceInit+0x4c>)
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	4610      	mov	r0, r2
 80004e8:	4619      	mov	r1, r3
 80004ea:	2360      	movs	r3, #96	@ 0x60
 80004ec:	461a      	mov	r2, r3
 80004ee:	f003 fc6b 	bl	8003dc8 <memcpy>

	HAL_ADC_Start_DMA(&adc,(uint32_t*)&ADCValue,3);
 80004f2:	2203      	movs	r2, #3
 80004f4:	4908      	ldr	r1, [pc, #32]	@ (8000518 <DistanceInit+0x50>)
 80004f6:	4806      	ldr	r0, [pc, #24]	@ (8000510 <DistanceInit+0x48>)
 80004f8:	f001 f844 	bl	8001584 <HAL_ADC_Start_DMA>
	ADC1->CR2 |= ADC_CR2_DDS;
 80004fc:	4b07      	ldr	r3, [pc, #28]	@ (800051c <DistanceInit+0x54>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4a06      	ldr	r2, [pc, #24]	@ (800051c <DistanceInit+0x54>)
 8000502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000506:	6093      	str	r3, [r2, #8]
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000034 	.word	0x20000034
 8000514:	2000007c 	.word	0x2000007c
 8000518:	20000028 	.word	0x20000028
 800051c:	40012000 	.word	0x40012000

08000520 <init_default_motor>:
void init_default_motor(Motor *motor,
						TIM_HandleTypeDef *fw_t,
						uint32_t fw_channel,
						TIM_HandleTypeDef *bk_t,
						uint32_t bk_channel)
{
 8000520:	b490      	push	{r4, r7}
 8000522:	b08a      	sub	sp, #40	@ 0x28
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
 800052c:	603b      	str	r3, [r7, #0]
	/*
	 * Forward driving PWM.
	 */
	PWM_Driver fw = {
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	61fb      	str	r3, [r7, #28]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	623b      	str	r3, [r7, #32]
			fw_t,
			fw_channel,
			fw_t->Init.Period
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	68db      	ldr	r3, [r3, #12]
	PWM_Driver fw = {
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
	};

	/*
	 * Reverse driving PWM.
	 */
	PWM_Driver bk = {
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000542:	617b      	str	r3, [r7, #20]
			bk_t,
			bk_channel,
			bk_t->Init.Period
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	68db      	ldr	r3, [r3, #12]
	PWM_Driver bk = {
 8000548:	61bb      	str	r3, [r7, #24]
	};

	/*
	 * Fill parameters.
	 */
	motor->fwd = fw;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	461c      	mov	r4, r3
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	motor->back = bk;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	330c      	adds	r3, #12
 800055e:	f107 0210 	add.w	r2, r7, #16
 8000562:	ca07      	ldmia	r2, {r0, r1, r2}
 8000564:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	motor->max_fwd = MOTOR_SCALE_MAX_FWD;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800056e:	619a      	str	r2, [r3, #24]
	motor->max_back = MOTOR_SCALE_MAX_BACK;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4a03      	ldr	r2, [pc, #12]	@ (8000580 <init_default_motor+0x60>)
 8000574:	61da      	str	r2, [r3, #28]
}
 8000576:	bf00      	nop
 8000578:	3728      	adds	r7, #40	@ 0x28
 800057a:	46bd      	mov	sp, r7
 800057c:	bc90      	pop	{r4, r7}
 800057e:	4770      	bx	lr
 8000580:	bf800000 	.word	0xbf800000

08000584 <drive_motor>:
 * @param[in] motor a pointer to the motor object to drive.
 * @param[in] power the duty cycle and direction to drive.
 *
 */
void drive_motor(Motor *motor, float power)
{
 8000584:	b480      	push	{r7}
 8000586:	b089      	sub	sp, #36	@ 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	ed87 0a00 	vstr	s0, [r7]


	PWM_Driver dir;
	PWM_Driver reverse;

	if (power > 0)
 8000590:	edd7 7a00 	vldr	s15, [r7]
 8000594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	dd1c      	ble.n	80005d8 <drive_motor+0x54>
	{
		dir = motor->fwd;
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		reverse = motor->back;
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	320c      	adds	r2, #12
 80005b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		power = (power > motor->max_fwd) ? motor->max_fwd : power;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80005be:	ed97 7a00 	vldr	s14, [r7]
 80005c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ca:	dd02      	ble.n	80005d2 <drive_motor+0x4e>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	e000      	b.n	80005d4 <drive_motor+0x50>
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	e022      	b.n	800061e <drive_motor+0x9a>
	}
	else
	{
		dir = motor->back;
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	320c      	adds	r2, #12
 80005e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		reverse = motor->fwd;
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		power = (power < motor->max_back) ? -motor->max_back : -power;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80005f8:	ed97 7a00 	vldr	s14, [r7]
 80005fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000604:	d505      	bpl.n	8000612 <drive_motor+0x8e>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	edd3 7a07 	vldr	s15, [r3, #28]
 800060c:	eef1 7a67 	vneg.f32	s15, s15
 8000610:	e003      	b.n	800061a <drive_motor+0x96>
 8000612:	edd7 7a00 	vldr	s15, [r7]
 8000616:	eef1 7a67 	vneg.f32	s15, s15
 800061a:	edc7 7a00 	vstr	s15, [r7]
	}

	/*
	 * Clear timer for driving on opposite direction.
	 */
	__HAL_TIM_SET_COMPARE(
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d104      	bne.n	800062e <drive_motor+0xaa>
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2200      	movs	r2, #0
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34
 800062c:	e013      	b.n	8000656 <drive_motor+0xd2>
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2b04      	cmp	r3, #4
 8000632:	d104      	bne.n	800063e <drive_motor+0xba>
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	6393      	str	r3, [r2, #56]	@ 0x38
 800063c:	e00b      	b.n	8000656 <drive_motor+0xd2>
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b08      	cmp	r3, #8
 8000642:	d104      	bne.n	800064e <drive_motor+0xca>
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800064c:	e003      	b.n	8000656 <drive_motor+0xd2>
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	6413      	str	r3, [r2, #64]	@ 0x40
	);

	/*
	 * Set timer for driving in the desired direction.
	 */
	__HAL_TIM_SET_COMPARE(
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d110      	bne.n	800067e <drive_motor+0xfa>
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	ee07 3a90 	vmov	s15, r3
 8000662:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000666:	edd7 7a00 	vldr	s15, [r7]
 800066a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000676:	ee17 2a90 	vmov	r2, s15
 800067a:	635a      	str	r2, [r3, #52]	@ 0x34
			dir.timer,
			dir.channel,
			dir.period * power
	);
}
 800067c:	e037      	b.n	80006ee <drive_motor+0x16a>
	__HAL_TIM_SET_COMPARE(
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	2b04      	cmp	r3, #4
 8000682:	d110      	bne.n	80006a6 <drive_motor+0x122>
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	ee07 3a90 	vmov	s15, r3
 800068a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800068e:	edd7 7a00 	vldr	s15, [r7]
 8000692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800069e:	ee17 3a90 	vmov	r3, s15
 80006a2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80006a4:	e023      	b.n	80006ee <drive_motor+0x16a>
	__HAL_TIM_SET_COMPARE(
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d110      	bne.n	80006ce <drive_motor+0x14a>
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	ee07 3a90 	vmov	s15, r3
 80006b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006b6:	edd7 7a00 	vldr	s15, [r7]
 80006ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006c6:	ee17 3a90 	vmov	r3, s15
 80006ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80006cc:	e00f      	b.n	80006ee <drive_motor+0x16a>
	__HAL_TIM_SET_COMPARE(
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	ee07 3a90 	vmov	s15, r3
 80006d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006d8:	edd7 7a00 	vldr	s15, [r7]
 80006dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006e8:	ee17 3a90 	vmov	r3, s15
 80006ec:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80006ee:	bf00      	nop
 80006f0:	3724      	adds	r7, #36	@ 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b096      	sub	sp, #88	@ 0x58
 8000700:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fe65 	bl	80013d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f899 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 fb31 	bl	8000d70 <MX_GPIO_Init>
  MX_DMA_Init();
 800070e:	f000 fb0f 	bl	8000d30 <MX_DMA_Init>
  MX_ADC1_Init();
 8000712:	f000 f8fb 	bl	800090c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000716:	f000 f983 	bl	8000a20 <MX_TIM1_Init>
  MX_TIM3_Init();
 800071a:	f000 fa11 	bl	8000b40 <MX_TIM3_Init>
  MX_TIM4_Init();
 800071e:	f000 fa63 	bl	8000be8 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000722:	f000 fab5 	bl	8000c90 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000726:	213c      	movs	r1, #60	@ 0x3c
 8000728:	483a      	ldr	r0, [pc, #232]	@ (8000814 <main+0x118>)
 800072a:	f002 fed3 	bl	80034d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800072e:	213c      	movs	r1, #60	@ 0x3c
 8000730:	4839      	ldr	r0, [pc, #228]	@ (8000818 <main+0x11c>)
 8000732:	f002 fecf 	bl	80034d4 <HAL_TIM_Encoder_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000736:	4b39      	ldr	r3, [pc, #228]	@ (800081c <main+0x120>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2200      	movs	r2, #0
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800073e:	2100      	movs	r1, #0
 8000740:	4836      	ldr	r0, [pc, #216]	@ (800081c <main+0x120>)
 8000742:	f002 fd71 	bl	8003228 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000746:	4b35      	ldr	r3, [pc, #212]	@ (800081c <main+0x120>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2200      	movs	r2, #0
 800074c:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800074e:	2104      	movs	r1, #4
 8000750:	4832      	ldr	r0, [pc, #200]	@ (800081c <main+0x120>)
 8000752:	f002 fd69 	bl	8003228 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8000756:	4b32      	ldr	r3, [pc, #200]	@ (8000820 <main+0x124>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2200      	movs	r2, #0
 800075c:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800075e:	2100      	movs	r1, #0
 8000760:	482f      	ldr	r0, [pc, #188]	@ (8000820 <main+0x124>)
 8000762:	f002 fd61 	bl	8003228 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 8000766:	4b2e      	ldr	r3, [pc, #184]	@ (8000820 <main+0x124>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 800076e:	2104      	movs	r1, #4
 8000770:	482b      	ldr	r0, [pc, #172]	@ (8000820 <main+0x124>)
 8000772:	f002 fd59 	bl	8003228 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, ir_data, 5); // adc handler initialization
 8000776:	2205      	movs	r2, #5
 8000778:	492a      	ldr	r1, [pc, #168]	@ (8000824 <main+0x128>)
 800077a:	482b      	ldr	r0, [pc, #172]	@ (8000828 <main+0x12c>)
 800077c:	f000 ff02 	bl	8001584 <HAL_ADC_Start_DMA>
  ADC1->CR2 |= ADC_CR2_DDS;
 8000780:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <main+0x130>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	4a29      	ldr	r2, [pc, #164]	@ (800082c <main+0x130>)
 8000786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800078a:	6093      	str	r3, [r2, #8]
  /*
    * Motor driving.
    */
   Motor rmotor;
   Motor lmotor;
   init_default_motor(&rmotor, &htim1, TIM_CHANNEL_2, &htim1, TIM_CHANNEL_1);
 800078c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000790:	2300      	movs	r3, #0
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	4b21      	ldr	r3, [pc, #132]	@ (800081c <main+0x120>)
 8000796:	2204      	movs	r2, #4
 8000798:	4920      	ldr	r1, [pc, #128]	@ (800081c <main+0x120>)
 800079a:	f7ff fec1 	bl	8000520 <init_default_motor>
   init_default_motor(&lmotor, &htim9, TIM_CHANNEL_1, &htim9, TIM_CHANNEL_2);
 800079e:	1d38      	adds	r0, r7, #4
 80007a0:	2304      	movs	r3, #4
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <main+0x124>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	491d      	ldr	r1, [pc, #116]	@ (8000820 <main+0x124>)
 80007aa:	f7ff feb9 	bl	8000520 <init_default_motor>

   //adc from brody :)
   DistanceInit(&hadc1, &hdma_adc1);
 80007ae:	4920      	ldr	r1, [pc, #128]	@ (8000830 <main+0x134>)
 80007b0:	481d      	ldr	r0, [pc, #116]	@ (8000828 <main+0x12c>)
 80007b2:	f7ff fe89 	bl	80004c8 <DistanceInit>

   //drive_motor(&rmotor, rdir);
   //drive_motor(&lmotor, ldir);

   uint32_t timer = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (1)
  {


	  // forward
	   float rdir = 0.6;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <main+0x138>)
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
	   float ldir = 0.6;
 80007be:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <main+0x138>)
 80007c0:	647b      	str	r3, [r7, #68]	@ 0x44

	  drive_motor(&rmotor, rdir);
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff feda 	bl	8000584 <drive_motor>
	  drive_motor(&lmotor, ldir);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fed4 	bl	8000584 <drive_motor>

	  // delay
	  HAL_Delay(5000);
 80007dc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007e0:	f000 fe68 	bl	80014b4 <HAL_Delay>
	  rdir = 0.5;
 80007e4:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80007e8:	64bb      	str	r3, [r7, #72]	@ 0x48
	  ldir = 0.8;
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <main+0x13c>)
 80007ec:	647b      	str	r3, [r7, #68]	@ 0x44

	  drive_motor(&rmotor, rdir);
 80007ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f2:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fec4 	bl	8000584 <drive_motor>
	  drive_motor(&lmotor, ldir);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff febe 	bl	8000584 <drive_motor>

	  HAL_Delay(5000);
 8000808:	f241 3088 	movw	r0, #5000	@ 0x1388
 800080c:	f000 fe52 	bl	80014b4 <HAL_Delay>
  {
 8000810:	bf00      	nop
 8000812:	e7d2      	b.n	80007ba <main+0xbe>
 8000814:	200001cc 	.word	0x200001cc
 8000818:	20000214 	.word	0x20000214
 800081c:	20000184 	.word	0x20000184
 8000820:	2000025c 	.word	0x2000025c
 8000824:	200002a4 	.word	0x200002a4
 8000828:	200000dc 	.word	0x200000dc
 800082c:	40012000 	.word	0x40012000
 8000830:	20000124 	.word	0x20000124
 8000834:	3f19999a 	.word	0x3f19999a
 8000838:	3f4ccccd 	.word	0x3f4ccccd

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	@ 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2230      	movs	r2, #48	@ 0x30
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fa90 	bl	8003d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	4b27      	ldr	r3, [pc, #156]	@ (8000904 <SystemClock_Config+0xc8>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	4a26      	ldr	r2, [pc, #152]	@ (8000904 <SystemClock_Config+0xc8>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000870:	4b24      	ldr	r3, [pc, #144]	@ (8000904 <SystemClock_Config+0xc8>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <SystemClock_Config+0xcc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a20      	ldr	r2, [pc, #128]	@ (8000908 <SystemClock_Config+0xcc>)
 8000886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <SystemClock_Config+0xcc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000898:	2301      	movs	r3, #1
 800089a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80008ac:	230c      	movs	r3, #12
 80008ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008b0:	2364      	movs	r3, #100	@ 0x64
 80008b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0320 	add.w	r3, r7, #32
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 f83d 	bl	8002940 <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008cc:	f000 faf8 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2302      	movs	r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2103      	movs	r1, #3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fa9f 	bl	8002e30 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008f8:	f000 fae2 	bl	8000ec0 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3750      	adds	r7, #80	@ 0x50
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800091e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a14 <MX_ADC1_Init+0x108>)
 8000920:	4a3d      	ldr	r2, [pc, #244]	@ (8000a18 <MX_ADC1_Init+0x10c>)
 8000922:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000924:	4b3b      	ldr	r3, [pc, #236]	@ (8000a14 <MX_ADC1_Init+0x108>)
 8000926:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800092a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800092c:	4b39      	ldr	r3, [pc, #228]	@ (8000a14 <MX_ADC1_Init+0x108>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000932:	4b38      	ldr	r3, [pc, #224]	@ (8000a14 <MX_ADC1_Init+0x108>)
 8000934:	2201      	movs	r2, #1
 8000936:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000938:	4b36      	ldr	r3, [pc, #216]	@ (8000a14 <MX_ADC1_Init+0x108>)
 800093a:	2201      	movs	r2, #1
 800093c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800093e:	4b35      	ldr	r3, [pc, #212]	@ (8000a14 <MX_ADC1_Init+0x108>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000946:	4b33      	ldr	r3, [pc, #204]	@ (8000a14 <MX_ADC1_Init+0x108>)
 8000948:	2200      	movs	r2, #0
 800094a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094c:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <MX_ADC1_Init+0x108>)
 800094e:	4a33      	ldr	r2, [pc, #204]	@ (8000a1c <MX_ADC1_Init+0x110>)
 8000950:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000952:	4b30      	ldr	r3, [pc, #192]	@ (8000a14 <MX_ADC1_Init+0x108>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000958:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <MX_ADC1_Init+0x108>)
 800095a:	2205      	movs	r2, #5
 800095c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800095e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <MX_ADC1_Init+0x108>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000966:	4b2b      	ldr	r3, [pc, #172]	@ (8000a14 <MX_ADC1_Init+0x108>)
 8000968:	2201      	movs	r2, #1
 800096a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800096c:	4829      	ldr	r0, [pc, #164]	@ (8000a14 <MX_ADC1_Init+0x108>)
 800096e:	f000 fdc5 	bl	80014fc <HAL_ADC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000978:	f000 faa2 	bl	8000ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800097c:	2300      	movs	r3, #0
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000984:	2307      	movs	r3, #7
 8000986:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4821      	ldr	r0, [pc, #132]	@ (8000a14 <MX_ADC1_Init+0x108>)
 800098e:	f000 ff07 	bl	80017a0 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000998:	f000 fa92 	bl	8000ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800099c:	230f      	movs	r3, #15
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	481a      	ldr	r0, [pc, #104]	@ (8000a14 <MX_ADC1_Init+0x108>)
 80009aa:	f000 fef9 	bl	80017a0 <HAL_ADC_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009b4:	f000 fa84 	bl	8000ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009b8:	2308      	movs	r3, #8
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009bc:	2303      	movs	r3, #3
 80009be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <MX_ADC1_Init+0x108>)
 80009c6:	f000 feeb 	bl	80017a0 <HAL_ADC_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009d0:	f000 fa76 	bl	8000ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009d4:	2309      	movs	r3, #9
 80009d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <MX_ADC1_Init+0x108>)
 80009e2:	f000 fedd 	bl	80017a0 <HAL_ADC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009ec:	f000 fa68 	bl	8000ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009f4:	2305      	movs	r3, #5
 80009f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_ADC1_Init+0x108>)
 80009fe:	f000 fecf 	bl	80017a0 <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a08:	f000 fa5a 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000dc 	.word	0x200000dc
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	0f000001 	.word	0x0f000001

08000a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b092      	sub	sp, #72	@ 0x48
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2220      	movs	r2, #32
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 f990 	bl	8003d70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a50:	4b39      	ldr	r3, [pc, #228]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000a52:	4a3a      	ldr	r2, [pc, #232]	@ (8000b3c <MX_TIM1_Init+0x11c>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a56:	4b38      	ldr	r3, [pc, #224]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b36      	ldr	r3, [pc, #216]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8000a62:	4b35      	ldr	r3, [pc, #212]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000a64:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b33      	ldr	r3, [pc, #204]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a70:	4b31      	ldr	r3, [pc, #196]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b30      	ldr	r3, [pc, #192]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a7c:	482e      	ldr	r0, [pc, #184]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000a7e:	f002 fb83 	bl	8003188 <HAL_TIM_PWM_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000a88:	f000 fa1a 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a94:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4827      	ldr	r0, [pc, #156]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000a9c:	f003 f8a8 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000aa6:	f000 fa0b 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aaa:	2360      	movs	r3, #96	@ 0x60
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aca:	2200      	movs	r2, #0
 8000acc:	4619      	mov	r1, r3
 8000ace:	481a      	ldr	r0, [pc, #104]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000ad0:	f002 fd8e 	bl	80035f0 <HAL_TIM_PWM_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000ada:	f000 f9f1 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4814      	ldr	r0, [pc, #80]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000ae8:	f002 fd82 	bl	80035f0 <HAL_TIM_PWM_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000af2:	f000 f9e5 	bl	8000ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000b1a:	f003 f8d7 	bl	8003ccc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b24:	f000 f9cc 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b28:	4803      	ldr	r0, [pc, #12]	@ (8000b38 <MX_TIM1_Init+0x118>)
 8000b2a:	f000 fb7b 	bl	8001224 <HAL_TIM_MspPostInit>

}
 8000b2e:	bf00      	nop
 8000b30:	3748      	adds	r7, #72	@ 0x48
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000184 	.word	0x20000184
 8000b3c:	40010000 	.word	0x40010000

08000b40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	@ 0x30
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	2224      	movs	r2, #36	@ 0x24
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 f90e 	bl	8003d70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <MX_TIM3_Init+0xa0>)
 8000b5e:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <MX_TIM3_Init+0xa4>)
 8000b60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <MX_TIM3_Init+0xa0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <MX_TIM3_Init+0xa0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_TIM3_Init+0xa0>)
 8000b70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_TIM3_Init+0xa0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <MX_TIM3_Init+0xa0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_TIM3_Init+0xa0>)
 8000bae:	f002 fbeb 	bl	8003388 <HAL_TIM_Encoder_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000bb8:	f000 f982 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_TIM3_Init+0xa0>)
 8000bca:	f003 f811 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000bd4:	f000 f974 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3730      	adds	r7, #48	@ 0x30
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200001cc 	.word	0x200001cc
 8000be4:	40000400 	.word	0x40000400

08000be8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	@ 0x30
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	2224      	movs	r2, #36	@ 0x24
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 f8ba 	bl	8003d70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c04:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <MX_TIM4_Init+0xa0>)
 8000c06:	4a21      	ldr	r2, [pc, #132]	@ (8000c8c <MX_TIM4_Init+0xa4>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <MX_TIM4_Init+0xa0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <MX_TIM4_Init+0xa0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_TIM4_Init+0xa0>)
 8000c18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_TIM4_Init+0xa0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_TIM4_Init+0xa0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c32:	2301      	movs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c42:	2301      	movs	r3, #1
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	4619      	mov	r1, r3
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <MX_TIM4_Init+0xa0>)
 8000c56:	f002 fb97 	bl	8003388 <HAL_TIM_Encoder_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000c60:	f000 f92e 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_TIM4_Init+0xa0>)
 8000c72:	f002 ffbd 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000c7c:	f000 f920 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3730      	adds	r7, #48	@ 0x30
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000214 	.word	0x20000214
 8000c8c:	40000800 	.word	0x40000800

08000c90 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <MX_TIM9_Init+0x98>)
 8000caa:	4a20      	ldr	r2, [pc, #128]	@ (8000d2c <MX_TIM9_Init+0x9c>)
 8000cac:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MX_TIM9_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_TIM9_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4999;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <MX_TIM9_Init+0x98>)
 8000cbc:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000cc0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <MX_TIM9_Init+0x98>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_TIM9_Init+0x98>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000cce:	4816      	ldr	r0, [pc, #88]	@ (8000d28 <MX_TIM9_Init+0x98>)
 8000cd0:	f002 fa5a 	bl	8003188 <HAL_TIM_PWM_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000cda:	f000 f8f1 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cde:	2360      	movs	r3, #96	@ 0x60
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <MX_TIM9_Init+0x98>)
 8000cf6:	f002 fc7b 	bl	80035f0 <HAL_TIM_PWM_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000d00:	f000 f8de 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2204      	movs	r2, #4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <MX_TIM9_Init+0x98>)
 8000d0c:	f002 fc70 	bl	80035f0 <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8000d16:	f000 f8d3 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000d1a:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <MX_TIM9_Init+0x98>)
 8000d1c:	f000 fa82 	bl	8001224 <HAL_TIM_MspPostInit>

}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000025c 	.word	0x2000025c
 8000d2c:	40014000 	.word	0x40014000

08000d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_DMA_Init+0x3c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d6c <MX_DMA_Init+0x3c>)
 8000d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_DMA_Init+0x3c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2038      	movs	r0, #56	@ 0x38
 8000d58:	f001 f8ad 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d5c:	2038      	movs	r0, #56	@ 0x38
 8000d5e:	f001 f8c6 	bl	8001eee <HAL_NVIC_EnableIRQ>

}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b49      	ldr	r3, [pc, #292]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a48      	ldr	r2, [pc, #288]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b46      	ldr	r3, [pc, #280]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b42      	ldr	r3, [pc, #264]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a41      	ldr	r2, [pc, #260]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b3f      	ldr	r3, [pc, #252]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b38      	ldr	r3, [pc, #224]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a33      	ldr	r2, [pc, #204]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b31      	ldr	r3, [pc, #196]	@ (8000eb0 <MX_GPIO_Init+0x140>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR2_Pin|IR3_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2150      	movs	r1, #80	@ 0x50
 8000dfa:	482e      	ldr	r0, [pc, #184]	@ (8000eb4 <MX_GPIO_Init+0x144>)
 8000dfc:	f001 fd86 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR1_GPIO_Port, IR1_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2110      	movs	r1, #16
 8000e04:	482c      	ldr	r0, [pc, #176]	@ (8000eb8 <MX_GPIO_Init+0x148>)
 8000e06:	f001 fd81 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e10:	482a      	ldr	r0, [pc, #168]	@ (8000ebc <MX_GPIO_Init+0x14c>)
 8000e12:	f001 fd7b 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IR2_Pin IR3_Pin */
  GPIO_InitStruct.Pin = IR2_Pin|IR3_Pin;
 8000e16:	2350      	movs	r3, #80	@ 0x50
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4821      	ldr	r0, [pc, #132]	@ (8000eb4 <MX_GPIO_Init+0x144>)
 8000e2e:	f001 fbe9 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR1_Pin */
  GPIO_InitStruct.Pin = IR1_Pin;
 8000e32:	2310      	movs	r3, #16
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IR1_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	481b      	ldr	r0, [pc, #108]	@ (8000eb8 <MX_GPIO_Init+0x148>)
 8000e4a:	f001 fbdb 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4815      	ldr	r0, [pc, #84]	@ (8000ebc <MX_GPIO_Init+0x14c>)
 8000e68:	f001 fbcc 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480e      	ldr	r0, [pc, #56]	@ (8000ebc <MX_GPIO_Init+0x14c>)
 8000e82:	f001 fbbf 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8c:	2312      	movs	r3, #18
 8000e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <MX_GPIO_Init+0x14c>)
 8000ea4:	f001 fbae 	bl	8002604 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	@ 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020400 	.word	0x40020400

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <Error_Handler+0x8>

08000ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	4a08      	ldr	r2, [pc, #32]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	@ 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a49      	ldr	r2, [pc, #292]	@ (8001060 <HAL_ADC_MspInit+0x144>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	f040 808c 	bne.w	8001058 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	4b47      	ldr	r3, [pc, #284]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f48:	4a46      	ldr	r2, [pc, #280]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f50:	4b44      	ldr	r3, [pc, #272]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f58:	61bb      	str	r3, [r7, #24]
 8000f5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	4b40      	ldr	r3, [pc, #256]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f64:	4a3f      	ldr	r2, [pc, #252]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	4b39      	ldr	r3, [pc, #228]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4a38      	ldr	r2, [pc, #224]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f88:	4b36      	ldr	r3, [pc, #216]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	4a31      	ldr	r2, [pc, #196]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <HAL_ADC_MspInit+0x148>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = PT1_Pin|PT5_Pin;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4829      	ldr	r0, [pc, #164]	@ (8001068 <HAL_ADC_MspInit+0x14c>)
 8000fc4:	f001 fb1e 	bl	8002604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PT3_Pin;
 8000fc8:	2320      	movs	r3, #32
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PT3_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4824      	ldr	r0, [pc, #144]	@ (800106c <HAL_ADC_MspInit+0x150>)
 8000fdc:	f001 fb12 	bl	8002604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PT1B0_Pin|PT2_Pin;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481f      	ldr	r0, [pc, #124]	@ (8001070 <HAL_ADC_MspInit+0x154>)
 8000ff4:	f001 fb06 	bl	8002604 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8001078 <HAL_ADC_MspInit+0x15c>)
 8000ffc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 8001012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001016:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 800101a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800101e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 8001022:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001026:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 800102a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800102e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800103c:	480d      	ldr	r0, [pc, #52]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 800103e:	f000 ff71 	bl	8001f24 <HAL_DMA_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001048:	f7ff ff3a 	bl	8000ec0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 8001050:	639a      	str	r2, [r3, #56]	@ 0x38
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_ADC_MspInit+0x158>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3730      	adds	r7, #48	@ 0x30
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40012000 	.word	0x40012000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020800 	.word	0x40020800
 8001070:	40020400 	.word	0x40020400
 8001074:	20000124 	.word	0x20000124
 8001078:	40026410 	.word	0x40026410

0800107c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a15      	ldr	r2, [pc, #84]	@ (80010e0 <HAL_TIM_PWM_MspInit+0x64>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d10e      	bne.n	80010ac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_TIM_PWM_MspInit+0x68>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <HAL_TIM_PWM_MspInit+0x68>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6453      	str	r3, [r2, #68]	@ 0x44
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <HAL_TIM_PWM_MspInit+0x68>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80010aa:	e012      	b.n	80010d2 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM9)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <HAL_TIM_PWM_MspInit+0x6c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10d      	bne.n	80010d2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_TIM_PWM_MspInit+0x68>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a09      	ldr	r2, [pc, #36]	@ (80010e4 <HAL_TIM_PWM_MspInit+0x68>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <HAL_TIM_PWM_MspInit+0x68>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40010000 	.word	0x40010000
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40014000 	.word	0x40014000

080010ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	@ 0x30
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a41      	ldr	r2, [pc, #260]	@ (8001210 <HAL_TIM_Encoder_MspInit+0x124>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d14a      	bne.n	80011a4 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	4b40      	ldr	r3, [pc, #256]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	4a3f      	ldr	r2, [pc, #252]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6413      	str	r3, [r2, #64]	@ 0x40
 800111e:	4b3d      	ldr	r3, [pc, #244]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
 8001128:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a38      	ldr	r2, [pc, #224]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b36      	ldr	r3, [pc, #216]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b32      	ldr	r3, [pc, #200]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a31      	ldr	r2, [pc, #196]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001162:	2340      	movs	r3, #64	@ 0x40
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001172:	2302      	movs	r3, #2
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4826      	ldr	r0, [pc, #152]	@ (8001218 <HAL_TIM_Encoder_MspInit+0x12c>)
 800117e:	f001 fa41 	bl	8002604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001182:	2320      	movs	r3, #32
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001192:	2302      	movs	r3, #2
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	481f      	ldr	r0, [pc, #124]	@ (800121c <HAL_TIM_Encoder_MspInit+0x130>)
 800119e:	f001 fa31 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011a2:	e030      	b.n	8001206 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM4)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <HAL_TIM_Encoder_MspInit+0x134>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12b      	bne.n	8001206 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a10      	ldr	r2, [pc, #64]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_TIM_Encoder_MspInit+0x128>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e6:	23c0      	movs	r3, #192	@ 0xc0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4806      	ldr	r0, [pc, #24]	@ (800121c <HAL_TIM_Encoder_MspInit+0x130>)
 8001202:	f001 f9ff 	bl	8002604 <HAL_GPIO_Init>
}
 8001206:	bf00      	nop
 8001208:	3730      	adds	r7, #48	@ 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40000400 	.word	0x40000400
 8001214:	40023800 	.word	0x40023800
 8001218:	40020800 	.word	0x40020800
 800121c:	40020400 	.word	0x40020400
 8001220:	40000800 	.word	0x40000800

08001224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a24      	ldr	r2, [pc, #144]	@ (80012d4 <HAL_TIM_MspPostInit+0xb0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d11f      	bne.n	8001286 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <HAL_TIM_MspPostInit+0xb4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a22      	ldr	r2, [pc, #136]	@ (80012d8 <HAL_TIM_MspPostInit+0xb4>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <HAL_TIM_MspPostInit+0xb4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RM_1_Pin|RM_2_Pin;
 8001262:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001274:	2301      	movs	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4817      	ldr	r0, [pc, #92]	@ (80012dc <HAL_TIM_MspPostInit+0xb8>)
 8001280:	f001 f9c0 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001284:	e022      	b.n	80012cc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a15      	ldr	r2, [pc, #84]	@ (80012e0 <HAL_TIM_MspPostInit+0xbc>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d11d      	bne.n	80012cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <HAL_TIM_MspPostInit+0xb4>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <HAL_TIM_MspPostInit+0xb4>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a0:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <HAL_TIM_MspPostInit+0xb4>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LM1_Pin|LM2_Pin;
 80012ac:	230c      	movs	r3, #12
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80012bc:	2303      	movs	r3, #3
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <HAL_TIM_MspPostInit+0xb8>)
 80012c8:	f001 f99c 	bl	8002604 <HAL_GPIO_Init>
}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	@ 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40010000 	.word	0x40010000
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40014000 	.word	0x40014000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133a:	f000 f89b 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <DMA2_Stream0_IRQHandler+0x10>)
 800134a:	f000 fef1 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000124 	.word	0x20000124

08001358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <SystemInit+0x20>)
 800135e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001362:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <SystemInit+0x20>)
 8001364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001380:	f7ff ffea 	bl	8001358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001386:	490d      	ldr	r1, [pc, #52]	@ (80013bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800139c:	4c0a      	ldr	r4, [pc, #40]	@ (80013c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013aa:	f002 fce9 	bl	8003d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff f9a5 	bl	80006fc <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013c0:	08003e24 	.word	0x08003e24
  ldr r2, =_sbss
 80013c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013c8:	200002b4 	.word	0x200002b4

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>
	...

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <HAL_Init+0x40>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_Init+0x40>)
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <HAL_Init+0x40>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 fd51 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	200f      	movs	r0, #15
 8001400:	f000 f808 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fd62 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_InitTick+0x54>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_InitTick+0x58>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 fd69 	bl	8001f0a <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f000 fd31 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <HAL_InitTick+0x5c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000000 	.word	0x20000000
 800146c:	20000008 	.word	0x20000008
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008
 8001498:	200002b0 	.word	0x200002b0

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200002b0 	.word	0x200002b0

080014b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff ffee 	bl	800149c <HAL_GetTick>
 80014c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d005      	beq.n	80014da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_Delay+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014da:	bf00      	nop
 80014dc:	f7ff ffde 	bl	800149c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f7      	bhi.n	80014dc <HAL_Delay+0x28>
  {
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e033      	b.n	800157a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fcfe 	bl	8000f1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	d118      	bne.n	800156c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001542:	f023 0302 	bic.w	r3, r3, #2
 8001546:	f043 0202 	orr.w	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 fa58 	bl	8001a04 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f023 0303 	bic.w	r3, r3, #3
 8001562:	f043 0201 	orr.w	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
 800156a:	e001      	b.n	8001570 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_Start_DMA+0x1e>
 800159e:	2302      	movs	r3, #2
 80015a0:	e0ce      	b.n	8001740 <HAL_ADC_Start_DMA+0x1bc>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d018      	beq.n	80015ea <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001748 <HAL_ADC_Start_DMA+0x1c4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5f      	ldr	r2, [pc, #380]	@ (800174c <HAL_ADC_Start_DMA+0x1c8>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0c9a      	lsrs	r2, r3, #18
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015f8:	d107      	bne.n	800160a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001608:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	f040 8086 	bne.w	8001726 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001638:	2b00      	cmp	r3, #0
 800163a:	d007      	beq.n	800164c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001644:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001658:	d106      	bne.n	8001668 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	f023 0206 	bic.w	r2, r3, #6
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	645a      	str	r2, [r3, #68]	@ 0x44
 8001666:	e002      	b.n	800166e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001676:	4b36      	ldr	r3, [pc, #216]	@ (8001750 <HAL_ADC_Start_DMA+0x1cc>)
 8001678:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167e:	4a35      	ldr	r2, [pc, #212]	@ (8001754 <HAL_ADC_Start_DMA+0x1d0>)
 8001680:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001686:	4a34      	ldr	r2, [pc, #208]	@ (8001758 <HAL_ADC_Start_DMA+0x1d4>)
 8001688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800168e:	4a33      	ldr	r2, [pc, #204]	@ (800175c <HAL_ADC_Start_DMA+0x1d8>)
 8001690:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800169a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80016aa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016ba:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	334c      	adds	r3, #76	@ 0x4c
 80016c6:	4619      	mov	r1, r3
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f000 fcd8 	bl	8002080 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10f      	bne.n	80016fc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d129      	bne.n	800173e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	e020      	b.n	800173e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <HAL_ADC_Start_DMA+0x1dc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d11b      	bne.n	800173e <HAL_ADC_Start_DMA+0x1ba>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d114      	bne.n	800173e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	e00b      	b.n	800173e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f043 0210 	orr.w	r2, r3, #16
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	431bde83 	.word	0x431bde83
 8001750:	40012300 	.word	0x40012300
 8001754:	08001bfd 	.word	0x08001bfd
 8001758:	08001cb7 	.word	0x08001cb7
 800175c:	08001cd3 	.word	0x08001cd3
 8001760:	40012000 	.word	0x40012000

08001764 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x1c>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e113      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x244>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	d925      	bls.n	8001818 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68d9      	ldr	r1, [r3, #12]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	3b1e      	subs	r3, #30
 80017e2:	2207      	movs	r2, #7
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43da      	mvns	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	400a      	ands	r2, r1
 80017f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68d9      	ldr	r1, [r3, #12]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	4603      	mov	r3, r0
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4403      	add	r3, r0
 800180a:	3b1e      	subs	r3, #30
 800180c:	409a      	lsls	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	e022      	b.n	800185e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6919      	ldr	r1, [r3, #16]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	2207      	movs	r2, #7
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	400a      	ands	r2, r1
 800183a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6919      	ldr	r1, [r3, #16]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	4603      	mov	r3, r0
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4403      	add	r3, r0
 8001854:	409a      	lsls	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d824      	bhi.n	80018b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	3b05      	subs	r3, #5
 8001878:	221f      	movs	r2, #31
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	400a      	ands	r2, r1
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3b05      	subs	r3, #5
 80018a2:	fa00 f203 	lsl.w	r2, r0, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ae:	e04c      	b.n	800194a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	d824      	bhi.n	8001902 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	3b23      	subs	r3, #35	@ 0x23
 80018ca:	221f      	movs	r2, #31
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43da      	mvns	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	400a      	ands	r2, r1
 80018d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3b23      	subs	r3, #35	@ 0x23
 80018f4:	fa00 f203 	lsl.w	r2, r0, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001900:	e023      	b.n	800194a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b41      	subs	r3, #65	@ 0x41
 8001914:	221f      	movs	r2, #31
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	400a      	ands	r2, r1
 8001922:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	3b41      	subs	r3, #65	@ 0x41
 800193e:	fa00 f203 	lsl.w	r2, r0, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800194a:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <HAL_ADC_ConfigChannel+0x250>)
 800194c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a28      	ldr	r2, [pc, #160]	@ (80019f4 <HAL_ADC_ConfigChannel+0x254>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d10f      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1d8>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b12      	cmp	r3, #18
 800195e:	d10b      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1d      	ldr	r2, [pc, #116]	@ (80019f4 <HAL_ADC_ConfigChannel+0x254>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12b      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23a>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1c      	ldr	r2, [pc, #112]	@ (80019f8 <HAL_ADC_ConfigChannel+0x258>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d003      	beq.n	8001994 <HAL_ADC_ConfigChannel+0x1f4>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b11      	cmp	r3, #17
 8001992:	d122      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a11      	ldr	r2, [pc, #68]	@ (80019f8 <HAL_ADC_ConfigChannel+0x258>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d111      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_ADC_ConfigChannel+0x25c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a11      	ldr	r2, [pc, #68]	@ (8001a00 <HAL_ADC_ConfigChannel+0x260>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0c9a      	lsrs	r2, r3, #18
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	40012300 	.word	0x40012300
 80019f4:	40012000 	.word	0x40012000
 80019f8:	10000012 	.word	0x10000012
 80019fc:	20000000 	.word	0x20000000
 8001a00:	431bde83 	.word	0x431bde83

08001a04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a0c:	4b79      	ldr	r3, [pc, #484]	@ (8001bf4 <ADC_Init+0x1f0>)
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	021a      	lsls	r2, r3, #8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6899      	ldr	r1, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	4a58      	ldr	r2, [pc, #352]	@ (8001bf8 <ADC_Init+0x1f4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d022      	beq.n	8001ae2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001aaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6899      	ldr	r1, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6899      	ldr	r1, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	e00f      	b.n	8001b02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b00:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0202 	bic.w	r2, r2, #2
 8001b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6899      	ldr	r1, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7e1b      	ldrb	r3, [r3, #24]
 8001b1c:	005a      	lsls	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b3e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6859      	ldr	r1, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	035a      	lsls	r2, r3, #13
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	e007      	b.n	8001b78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b76:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	051a      	lsls	r2, r3, #20
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6899      	ldr	r1, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bba:	025a      	lsls	r2, r3, #9
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6899      	ldr	r1, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	029a      	lsls	r2, r3, #10
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40012300 	.word	0x40012300
 8001bf8:	0f000001 	.word	0x0f000001

08001bfc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d13c      	bne.n	8001c90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d12b      	bne.n	8001c88 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d127      	bne.n	8001c88 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d119      	bne.n	8001c88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0220 	bic.w	r2, r2, #32
 8001c62:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fd6b 	bl	8001764 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c8e:	e00e      	b.n	8001cae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff fd75 	bl	800178c <HAL_ADC_ErrorCallback>
}
 8001ca2:	e004      	b.n	8001cae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff fd57 	bl	8001778 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cde:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2240      	movs	r2, #64	@ 0x40
 8001ce4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f043 0204 	orr.w	r2, r3, #4
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f7ff fd4a 	bl	800178c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4907      	ldr	r1, [pc, #28]	@ (8001d9c <__NVIC_EnableIRQ+0x38>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	@ (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff29 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff3e 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff31 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa2 	bl	8001e5c <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff fab4 	bl	800149c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e099      	b.n	8002074 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f60:	e00f      	b.n	8001f82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f62:	f7ff fa9b 	bl	800149c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d908      	bls.n	8001f82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e078      	b.n	8002074 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e8      	bne.n	8001f62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4b38      	ldr	r3, [pc, #224]	@ (800207c <HAL_DMA_Init+0x158>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d107      	bne.n	8001fec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f023 0307 	bic.w	r3, r3, #7
 8002002:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	2b04      	cmp	r3, #4
 8002014:	d117      	bne.n	8002046 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00e      	beq.n	8002046 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fa6f 	bl	800250c <DMA_CheckFifoParam>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2240      	movs	r2, #64	@ 0x40
 8002038:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002042:	2301      	movs	r3, #1
 8002044:	e016      	b.n	8002074 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fa26 	bl	80024a0 <DMA_CalcBaseAndBitshift>
 8002054:	4603      	mov	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205c:	223f      	movs	r2, #63	@ 0x3f
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	f010803f 	.word	0xf010803f

08002080 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002096:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_DMA_Start_IT+0x26>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e040      	b.n	8002128 <HAL_DMA_Start_IT+0xa8>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d12f      	bne.n	800211a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2202      	movs	r2, #2
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f9b8 	bl	8002444 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	223f      	movs	r2, #63	@ 0x3f
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0216 	orr.w	r2, r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0208 	orr.w	r2, r2, #8
 8002106:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e005      	b.n	8002126 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002122:	2302      	movs	r3, #2
 8002124:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800213c:	4b8e      	ldr	r3, [pc, #568]	@ (8002378 <HAL_DMA_IRQHandler+0x248>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a8e      	ldr	r2, [pc, #568]	@ (800237c <HAL_DMA_IRQHandler+0x24c>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0a9b      	lsrs	r3, r3, #10
 8002148:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	2208      	movs	r2, #8
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01a      	beq.n	800219c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0204 	bic.w	r2, r2, #4
 8002182:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002188:	2208      	movs	r2, #8
 800218a:	409a      	lsls	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a0:	2201      	movs	r2, #1
 80021a2:	409a      	lsls	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d012      	beq.n	80021d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	2201      	movs	r2, #1
 80021c0:	409a      	lsls	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ca:	f043 0202 	orr.w	r2, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d6:	2204      	movs	r2, #4
 80021d8:	409a      	lsls	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d012      	beq.n	8002208 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f4:	2204      	movs	r2, #4
 80021f6:	409a      	lsls	r2, r3
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	f043 0204 	orr.w	r2, r3, #4
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220c:	2210      	movs	r2, #16
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d043      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d03c      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	2210      	movs	r2, #16
 800222c:	409a      	lsls	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d018      	beq.n	8002272 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d108      	bne.n	8002260 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d024      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
 800225e:	e01f      	b.n	80022a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01b      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
 8002270:	e016      	b.n	80022a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d107      	bne.n	8002290 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0208 	bic.w	r2, r2, #8
 800228e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a4:	2220      	movs	r2, #32
 80022a6:	409a      	lsls	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 808f 	beq.w	80023d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8087 	beq.w	80023d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c6:	2220      	movs	r2, #32
 80022c8:	409a      	lsls	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d136      	bne.n	8002348 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0216 	bic.w	r2, r2, #22
 80022e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <HAL_DMA_IRQHandler+0x1da>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0208 	bic.w	r2, r2, #8
 8002318:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	223f      	movs	r2, #63	@ 0x3f
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800233a:	2b00      	cmp	r3, #0
 800233c:	d07e      	beq.n	800243c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
        }
        return;
 8002346:	e079      	b.n	800243c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01d      	beq.n	8002392 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10d      	bne.n	8002380 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002368:	2b00      	cmp	r3, #0
 800236a:	d031      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
 8002374:	e02c      	b.n	80023d0 <HAL_DMA_IRQHandler+0x2a0>
 8002376:	bf00      	nop
 8002378:	20000000 	.word	0x20000000
 800237c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d023      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
 8002390:	e01e      	b.n	80023d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10f      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0210 	bic.w	r2, r2, #16
 80023ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d032      	beq.n	800243e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d022      	beq.n	800242a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2205      	movs	r2, #5
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	3301      	adds	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	d307      	bcc.n	8002418 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f2      	bne.n	80023fc <HAL_DMA_IRQHandler+0x2cc>
 8002416:	e000      	b.n	800241a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002418:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4798      	blx	r3
 800243a:	e000      	b.n	800243e <HAL_DMA_IRQHandler+0x30e>
        return;
 800243c:	bf00      	nop
    }
  }
}
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002460:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b40      	cmp	r3, #64	@ 0x40
 8002470:	d108      	bne.n	8002484 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002482:	e007      	b.n	8002494 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3b10      	subs	r3, #16
 80024b0:	4a14      	ldr	r2, [pc, #80]	@ (8002504 <DMA_CalcBaseAndBitshift+0x64>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ba:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <DMA_CalcBaseAndBitshift+0x68>)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d909      	bls.n	80024e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	1d1a      	adds	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	659a      	str	r2, [r3, #88]	@ 0x58
 80024e0:	e007      	b.n	80024f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	aaaaaaab 	.word	0xaaaaaaab
 8002508:	08003e0c 	.word	0x08003e0c

0800250c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11f      	bne.n	8002566 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d856      	bhi.n	80025da <DMA_CheckFifoParam+0xce>
 800252c:	a201      	add	r2, pc, #4	@ (adr r2, 8002534 <DMA_CheckFifoParam+0x28>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	08002545 	.word	0x08002545
 8002538:	08002557 	.word	0x08002557
 800253c:	08002545 	.word	0x08002545
 8002540:	080025db 	.word	0x080025db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d046      	beq.n	80025de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002554:	e043      	b.n	80025de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800255e:	d140      	bne.n	80025e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002564:	e03d      	b.n	80025e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800256e:	d121      	bne.n	80025b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d837      	bhi.n	80025e6 <DMA_CheckFifoParam+0xda>
 8002576:	a201      	add	r2, pc, #4	@ (adr r2, 800257c <DMA_CheckFifoParam+0x70>)
 8002578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257c:	0800258d 	.word	0x0800258d
 8002580:	08002593 	.word	0x08002593
 8002584:	0800258d 	.word	0x0800258d
 8002588:	080025a5 	.word	0x080025a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      break;
 8002590:	e030      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002596:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d025      	beq.n	80025ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a2:	e022      	b.n	80025ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025ac:	d11f      	bne.n	80025ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025b2:	e01c      	b.n	80025ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d903      	bls.n	80025c2 <DMA_CheckFifoParam+0xb6>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d003      	beq.n	80025c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025c0:	e018      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      break;
 80025c6:	e015      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00e      	beq.n	80025f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e00b      	b.n	80025f2 <DMA_CheckFifoParam+0xe6>
      break;
 80025da:	bf00      	nop
 80025dc:	e00a      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e008      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e006      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e004      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
    }
  } 
  
  return status; 
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e159      	b.n	80028d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002620:	2201      	movs	r2, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	f040 8148 	bne.w	80028ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d005      	beq.n	8002656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	2b02      	cmp	r3, #2
 8002654:	d130      	bne.n	80026b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800268c:	2201      	movs	r2, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 0201 	and.w	r2, r3, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d017      	beq.n	80026f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d123      	bne.n	8002748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	08da      	lsrs	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3208      	adds	r2, #8
 8002708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	220f      	movs	r2, #15
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	08da      	lsrs	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3208      	adds	r2, #8
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0203 	and.w	r2, r3, #3
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80a2 	beq.w	80028ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b57      	ldr	r3, [pc, #348]	@ (80028ec <HAL_GPIO_Init+0x2e8>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	4a56      	ldr	r2, [pc, #344]	@ (80028ec <HAL_GPIO_Init+0x2e8>)
 8002794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002798:	6453      	str	r3, [r2, #68]	@ 0x44
 800279a:	4b54      	ldr	r3, [pc, #336]	@ (80028ec <HAL_GPIO_Init+0x2e8>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a6:	4a52      	ldr	r2, [pc, #328]	@ (80028f0 <HAL_GPIO_Init+0x2ec>)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	220f      	movs	r2, #15
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a49      	ldr	r2, [pc, #292]	@ (80028f4 <HAL_GPIO_Init+0x2f0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d019      	beq.n	8002806 <HAL_GPIO_Init+0x202>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a48      	ldr	r2, [pc, #288]	@ (80028f8 <HAL_GPIO_Init+0x2f4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_GPIO_Init+0x1fe>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a47      	ldr	r2, [pc, #284]	@ (80028fc <HAL_GPIO_Init+0x2f8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00d      	beq.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a46      	ldr	r2, [pc, #280]	@ (8002900 <HAL_GPIO_Init+0x2fc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d007      	beq.n	80027fa <HAL_GPIO_Init+0x1f6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a45      	ldr	r2, [pc, #276]	@ (8002904 <HAL_GPIO_Init+0x300>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_GPIO_Init+0x1f2>
 80027f2:	2304      	movs	r3, #4
 80027f4:	e008      	b.n	8002808 <HAL_GPIO_Init+0x204>
 80027f6:	2307      	movs	r3, #7
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x204>
 80027fa:	2303      	movs	r3, #3
 80027fc:	e004      	b.n	8002808 <HAL_GPIO_Init+0x204>
 80027fe:	2302      	movs	r3, #2
 8002800:	e002      	b.n	8002808 <HAL_GPIO_Init+0x204>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_GPIO_Init+0x204>
 8002806:	2300      	movs	r3, #0
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	f002 0203 	and.w	r2, r2, #3
 800280e:	0092      	lsls	r2, r2, #2
 8002810:	4093      	lsls	r3, r2
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002818:	4935      	ldr	r1, [pc, #212]	@ (80028f0 <HAL_GPIO_Init+0x2ec>)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002826:	4b38      	ldr	r3, [pc, #224]	@ (8002908 <HAL_GPIO_Init+0x304>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284a:	4a2f      	ldr	r2, [pc, #188]	@ (8002908 <HAL_GPIO_Init+0x304>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002850:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <HAL_GPIO_Init+0x304>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002874:	4a24      	ldr	r2, [pc, #144]	@ (8002908 <HAL_GPIO_Init+0x304>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800287a:	4b23      	ldr	r3, [pc, #140]	@ (8002908 <HAL_GPIO_Init+0x304>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800289e:	4a1a      	ldr	r2, [pc, #104]	@ (8002908 <HAL_GPIO_Init+0x304>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a4:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <HAL_GPIO_Init+0x304>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002908 <HAL_GPIO_Init+0x304>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	f67f aea2 	bls.w	8002620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3724      	adds	r7, #36	@ 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40013800 	.word	0x40013800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	40020400 	.word	0x40020400
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020c00 	.word	0x40020c00
 8002904:	40021000 	.word	0x40021000
 8002908:	40013c00 	.word	0x40013c00

0800290c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002928:	e003      	b.n	8002932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e267      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d075      	beq.n	8002a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800295e:	4b88      	ldr	r3, [pc, #544]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d00c      	beq.n	8002984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4b85      	ldr	r3, [pc, #532]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d112      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002976:	4b82      	ldr	r3, [pc, #520]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800297e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002982:	d10b      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	4b7e      	ldr	r3, [pc, #504]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05b      	beq.n	8002a48 <HAL_RCC_OscConfig+0x108>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d157      	bne.n	8002a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e242      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a4:	d106      	bne.n	80029b4 <HAL_RCC_OscConfig+0x74>
 80029a6:	4b76      	ldr	r3, [pc, #472]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a75      	ldr	r2, [pc, #468]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x98>
 80029be:	4b70      	ldr	r3, [pc, #448]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029d8:	4b69      	ldr	r3, [pc, #420]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a68      	ldr	r2, [pc, #416]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b66      	ldr	r3, [pc, #408]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a65      	ldr	r2, [pc, #404]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fd50 	bl	800149c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fe fd4c 	bl	800149c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	@ 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e207      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b5b      	ldr	r3, [pc, #364]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xc0>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe fd3c 	bl	800149c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe fd38 	bl	800149c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	@ 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1f3      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b51      	ldr	r3, [pc, #324]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0xe8>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d063      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a56:	4b4a      	ldr	r3, [pc, #296]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b47      	ldr	r3, [pc, #284]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6e:	4b44      	ldr	r3, [pc, #272]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b41      	ldr	r3, [pc, #260]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1c7      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b3b      	ldr	r3, [pc, #236]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4937      	ldr	r1, [pc, #220]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e03a      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b34      	ldr	r3, [pc, #208]	@ (8002b84 <HAL_RCC_OscConfig+0x244>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fcf1 	bl	800149c <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abe:	f7fe fced 	bl	800149c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1a8      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b28      	ldr	r3, [pc, #160]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4925      	ldr	r1, [pc, #148]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e015      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	4b24      	ldr	r3, [pc, #144]	@ (8002b84 <HAL_RCC_OscConfig+0x244>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fcd0 	bl	800149c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b00:	f7fe fccc 	bl	800149c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e187      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d036      	beq.n	8002b98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <HAL_RCC_OscConfig+0x248>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe fcb0 	bl	800149c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe fcac 	bl	800149c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e167      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_RCC_OscConfig+0x240>)
 8002b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x200>
 8002b5e:	e01b      	b.n	8002b98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b60:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_RCC_OscConfig+0x248>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fe fc99 	bl	800149c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	e00e      	b.n	8002b8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7fe fc95 	bl	800149c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d907      	bls.n	8002b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e150      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
 8002b80:	40023800 	.word	0x40023800
 8002b84:	42470000 	.word	0x42470000
 8002b88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	4b88      	ldr	r3, [pc, #544]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1ea      	bne.n	8002b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8097 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002baa:	4b81      	ldr	r3, [pc, #516]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	4b7d      	ldr	r3, [pc, #500]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc6:	4b7a      	ldr	r3, [pc, #488]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b77      	ldr	r3, [pc, #476]	@ (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d118      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be2:	4b74      	ldr	r3, [pc, #464]	@ (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a73      	ldr	r2, [pc, #460]	@ (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7fe fc55 	bl	800149c <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7fe fc51 	bl	800149c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e10c      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b6a      	ldr	r3, [pc, #424]	@ (8002db4 <HAL_RCC_OscConfig+0x474>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2ea>
 8002c1c:	4b64      	ldr	r3, [pc, #400]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c20:	4a63      	ldr	r2, [pc, #396]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c28:	e01c      	b.n	8002c64 <HAL_RCC_OscConfig+0x324>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x30c>
 8002c32:	4b5f      	ldr	r3, [pc, #380]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	4a5e      	ldr	r2, [pc, #376]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	4a5b      	ldr	r2, [pc, #364]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0x324>
 8002c4c:	4b58      	ldr	r3, [pc, #352]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c50:	4a57      	ldr	r2, [pc, #348]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c58:	4b55      	ldr	r3, [pc, #340]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5c:	4a54      	ldr	r2, [pc, #336]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	f023 0304 	bic.w	r3, r3, #4
 8002c62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fe fc16 	bl	800149c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fe fc12 	bl	800149c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0cb      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	4b49      	ldr	r3, [pc, #292]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ee      	beq.n	8002c74 <HAL_RCC_OscConfig+0x334>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c98:	f7fe fc00 	bl	800149c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fbfc 	bl	800149c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0b5      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ee      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc8:	4b39      	ldr	r3, [pc, #228]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	4a38      	ldr	r2, [pc, #224]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80a1 	beq.w	8002e20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cde:	4b34      	ldr	r3, [pc, #208]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d05c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d141      	bne.n	8002d76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b31      	ldr	r3, [pc, #196]	@ (8002db8 <HAL_RCC_OscConfig+0x478>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fbd0 	bl	800149c <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe fbcc 	bl	800149c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e087      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d12:	4b27      	ldr	r3, [pc, #156]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	019b      	lsls	r3, r3, #6
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	3b01      	subs	r3, #1
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	491b      	ldr	r1, [pc, #108]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d48:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <HAL_RCC_OscConfig+0x478>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fba5 	bl	800149c <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d56:	f7fe fba1 	bl	800149c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e05c      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d68:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x416>
 8002d74:	e054      	b.n	8002e20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <HAL_RCC_OscConfig+0x478>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fb8e 	bl	800149c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fb8a 	bl	800149c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e045      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_RCC_OscConfig+0x470>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x444>
 8002da2:	e03d      	b.n	8002e20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e038      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40007000 	.word	0x40007000
 8002db8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d121      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d11a      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002df2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d111      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	3b01      	subs	r3, #1
 8002e06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0cc      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b68      	ldr	r3, [pc, #416]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d90c      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b65      	ldr	r3, [pc, #404]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b63      	ldr	r3, [pc, #396]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0b8      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e84:	4b59      	ldr	r3, [pc, #356]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a58      	ldr	r2, [pc, #352]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e9c:	4b53      	ldr	r3, [pc, #332]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a52      	ldr	r2, [pc, #328]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b50      	ldr	r3, [pc, #320]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	494d      	ldr	r1, [pc, #308]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d044      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b47      	ldr	r3, [pc, #284]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d119      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e07f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b3f      	ldr	r3, [pc, #252]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3b      	ldr	r3, [pc, #236]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e067      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b37      	ldr	r3, [pc, #220]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4934      	ldr	r1, [pc, #208]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fabc 	bl	800149c <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fe fab8 	bl	800149c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e04f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b25      	ldr	r3, [pc, #148]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d20c      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b22      	ldr	r3, [pc, #136]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e032      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4916      	ldr	r1, [pc, #88]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa2:	4b12      	ldr	r3, [pc, #72]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	490e      	ldr	r1, [pc, #56]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb6:	f000 f821 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	490a      	ldr	r1, [pc, #40]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	fa22 f303 	lsr.w	r3, r2, r3
 8002fce:	4a09      	ldr	r2, [pc, #36]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fa1c 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023c00 	.word	0x40023c00
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08003dfc 	.word	0x08003dfc
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	20000004 	.word	0x20000004

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003000:	b090      	sub	sp, #64	@ 0x40
 8003002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	637b      	str	r3, [r7, #52]	@ 0x34
 8003008:	2300      	movs	r3, #0
 800300a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800300c:	2300      	movs	r3, #0
 800300e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003014:	4b59      	ldr	r3, [pc, #356]	@ (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d00d      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x40>
 8003020:	2b08      	cmp	r3, #8
 8003022:	f200 80a1 	bhi.w	8003168 <HAL_RCC_GetSysClockFreq+0x16c>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x34>
 800302a:	2b04      	cmp	r3, #4
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x3a>
 800302e:	e09b      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b53      	ldr	r3, [pc, #332]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x184>)
 8003032:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003034:	e09b      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003036:	4b53      	ldr	r3, [pc, #332]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x188>)
 8003038:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800303a:	e098      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	4b4f      	ldr	r3, [pc, #316]	@ (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003046:	4b4d      	ldr	r3, [pc, #308]	@ (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d028      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b4a      	ldr	r3, [pc, #296]	@ (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	2200      	movs	r2, #0
 800305a:	623b      	str	r3, [r7, #32]
 800305c:	627a      	str	r2, [r7, #36]	@ 0x24
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003064:	2100      	movs	r1, #0
 8003066:	4b47      	ldr	r3, [pc, #284]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x188>)
 8003068:	fb03 f201 	mul.w	r2, r3, r1
 800306c:	2300      	movs	r3, #0
 800306e:	fb00 f303 	mul.w	r3, r0, r3
 8003072:	4413      	add	r3, r2
 8003074:	4a43      	ldr	r2, [pc, #268]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x188>)
 8003076:	fba0 1202 	umull	r1, r2, r0, r2
 800307a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800307c:	460a      	mov	r2, r1
 800307e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003082:	4413      	add	r3, r2
 8003084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003088:	2200      	movs	r2, #0
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	61fa      	str	r2, [r7, #28]
 800308e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003092:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003096:	f7fd f89f 	bl	80001d8 <__aeabi_uldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4613      	mov	r3, r2
 80030a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a2:	e053      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a4:	4b35      	ldr	r3, [pc, #212]	@ (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	2200      	movs	r2, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	617a      	str	r2, [r7, #20]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030b6:	f04f 0b00 	mov.w	fp, #0
 80030ba:	4652      	mov	r2, sl
 80030bc:	465b      	mov	r3, fp
 80030be:	f04f 0000 	mov.w	r0, #0
 80030c2:	f04f 0100 	mov.w	r1, #0
 80030c6:	0159      	lsls	r1, r3, #5
 80030c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030cc:	0150      	lsls	r0, r2, #5
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	ebb2 080a 	subs.w	r8, r2, sl
 80030d6:	eb63 090b 	sbc.w	r9, r3, fp
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030ee:	ebb2 0408 	subs.w	r4, r2, r8
 80030f2:	eb63 0509 	sbc.w	r5, r3, r9
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	00eb      	lsls	r3, r5, #3
 8003100:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003104:	00e2      	lsls	r2, r4, #3
 8003106:	4614      	mov	r4, r2
 8003108:	461d      	mov	r5, r3
 800310a:	eb14 030a 	adds.w	r3, r4, sl
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	eb45 030b 	adc.w	r3, r5, fp
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003122:	4629      	mov	r1, r5
 8003124:	028b      	lsls	r3, r1, #10
 8003126:	4621      	mov	r1, r4
 8003128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800312c:	4621      	mov	r1, r4
 800312e:	028a      	lsls	r2, r1, #10
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003136:	2200      	movs	r2, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	60fa      	str	r2, [r7, #12]
 800313c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003140:	f7fd f84a 	bl	80001d8 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4613      	mov	r3, r2
 800314a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCC_GetSysClockFreq+0x180>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	3301      	adds	r3, #1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800315c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800315e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003166:	e002      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x184>)
 800316a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800316c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003170:	4618      	mov	r0, r3
 8003172:	3740      	adds	r7, #64	@ 0x40
 8003174:	46bd      	mov	sp, r7
 8003176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	00f42400 	.word	0x00f42400
 8003184:	016e3600 	.word	0x016e3600

08003188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e041      	b.n	800321e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd ff64 	bl	800107c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f000 fad4 	bl	8003774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_TIM_PWM_Start+0x24>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e022      	b.n	8003292 <HAL_TIM_PWM_Start+0x6a>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d109      	bne.n	8003266 <HAL_TIM_PWM_Start+0x3e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e015      	b.n	8003292 <HAL_TIM_PWM_Start+0x6a>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d109      	bne.n	8003280 <HAL_TIM_PWM_Start+0x58>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e008      	b.n	8003292 <HAL_TIM_PWM_Start+0x6a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	bf14      	ite	ne
 800328c:	2301      	movne	r3, #1
 800328e:	2300      	moveq	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e068      	b.n	800336c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start+0x82>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032a8:	e013      	b.n	80032d2 <HAL_TIM_PWM_Start+0xaa>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start+0x92>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b8:	e00b      	b.n	80032d2 <HAL_TIM_PWM_Start+0xaa>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d104      	bne.n	80032ca <HAL_TIM_PWM_Start+0xa2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c8:	e003      	b.n	80032d2 <HAL_TIM_PWM_Start+0xaa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fc62 	bl	8003ba4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a23      	ldr	r2, [pc, #140]	@ (8003374 <HAL_TIM_PWM_Start+0x14c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d107      	bne.n	80032fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003374 <HAL_TIM_PWM_Start+0x14c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_TIM_PWM_Start+0x10e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330c:	d013      	beq.n	8003336 <HAL_TIM_PWM_Start+0x10e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a19      	ldr	r2, [pc, #100]	@ (8003378 <HAL_TIM_PWM_Start+0x150>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_TIM_PWM_Start+0x10e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a17      	ldr	r2, [pc, #92]	@ (800337c <HAL_TIM_PWM_Start+0x154>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_TIM_PWM_Start+0x10e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a16      	ldr	r2, [pc, #88]	@ (8003380 <HAL_TIM_PWM_Start+0x158>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_TIM_PWM_Start+0x10e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a14      	ldr	r2, [pc, #80]	@ (8003384 <HAL_TIM_PWM_Start+0x15c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d111      	bne.n	800335a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d010      	beq.n	800336a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003358:	e007      	b.n	800336a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40010000 	.word	0x40010000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40014000 	.word	0x40014000

08003388 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e097      	b.n	80034cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d106      	bne.n	80033b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7fd fe9b 	bl	80010ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033cc:	f023 0307 	bic.w	r3, r3, #7
 80033d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f000 f9c9 	bl	8003774 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	4313      	orrs	r3, r2
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003428:	f023 030c 	bic.w	r3, r3, #12
 800342c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003434:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	4313      	orrs	r3, r2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	011a      	lsls	r2, r3, #4
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	031b      	lsls	r3, r3, #12
 8003458:	4313      	orrs	r3, r2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800346e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4313      	orrs	r3, r2
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80034fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d110      	bne.n	8003526 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800350a:	7b7b      	ldrb	r3, [r7, #13]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d001      	beq.n	8003514 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e069      	b.n	80035e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003524:	e031      	b.n	800358a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d110      	bne.n	800354e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800352c:	7bbb      	ldrb	r3, [r7, #14]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d102      	bne.n	8003538 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003532:	7b3b      	ldrb	r3, [r7, #12]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d001      	beq.n	800353c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e055      	b.n	80035e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800354c:	e01d      	b.n	800358a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d108      	bne.n	8003566 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003554:	7bbb      	ldrb	r3, [r7, #14]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d105      	bne.n	8003566 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800355a:	7b7b      	ldrb	r3, [r7, #13]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d102      	bne.n	8003566 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003560:	7b3b      	ldrb	r3, [r7, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d001      	beq.n	800356a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e03e      	b.n	80035e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_TIM_Encoder_Start+0xc4>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b04      	cmp	r3, #4
 8003594:	d008      	beq.n	80035a8 <HAL_TIM_Encoder_Start+0xd4>
 8003596:	e00f      	b.n	80035b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2201      	movs	r2, #1
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 faff 	bl	8003ba4 <TIM_CCxChannelCmd>
      break;
 80035a6:	e016      	b.n	80035d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	2104      	movs	r1, #4
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 faf7 	bl	8003ba4 <TIM_CCxChannelCmd>
      break;
 80035b6:	e00e      	b.n	80035d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 faef 	bl	8003ba4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2201      	movs	r2, #1
 80035cc:	2104      	movs	r1, #4
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fae8 	bl	8003ba4 <TIM_CCxChannelCmd>
      break;
 80035d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800360a:	2302      	movs	r3, #2
 800360c:	e0ae      	b.n	800376c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b0c      	cmp	r3, #12
 800361a:	f200 809f 	bhi.w	800375c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800361e:	a201      	add	r2, pc, #4	@ (adr r2, 8003624 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	08003659 	.word	0x08003659
 8003628:	0800375d 	.word	0x0800375d
 800362c:	0800375d 	.word	0x0800375d
 8003630:	0800375d 	.word	0x0800375d
 8003634:	08003699 	.word	0x08003699
 8003638:	0800375d 	.word	0x0800375d
 800363c:	0800375d 	.word	0x0800375d
 8003640:	0800375d 	.word	0x0800375d
 8003644:	080036db 	.word	0x080036db
 8003648:	0800375d 	.word	0x0800375d
 800364c:	0800375d 	.word	0x0800375d
 8003650:	0800375d 	.word	0x0800375d
 8003654:	0800371b 	.word	0x0800371b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f914 	bl	800388c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0208 	orr.w	r2, r2, #8
 8003672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0204 	bic.w	r2, r2, #4
 8003682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6999      	ldr	r1, [r3, #24]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	619a      	str	r2, [r3, #24]
      break;
 8003696:	e064      	b.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f95a 	bl	8003958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6999      	ldr	r1, [r3, #24]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	619a      	str	r2, [r3, #24]
      break;
 80036d8:	e043      	b.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f9a5 	bl	8003a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0208 	orr.w	r2, r2, #8
 80036f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0204 	bic.w	r2, r2, #4
 8003704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69d9      	ldr	r1, [r3, #28]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	61da      	str	r2, [r3, #28]
      break;
 8003718:	e023      	b.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f9ef 	bl	8003b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69d9      	ldr	r1, [r3, #28]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	021a      	lsls	r2, r3, #8
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	61da      	str	r2, [r3, #28]
      break;
 800375a:	e002      	b.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
      break;
 8003760:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800376a:	7dfb      	ldrb	r3, [r7, #23]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a3a      	ldr	r2, [pc, #232]	@ (8003870 <TIM_Base_SetConfig+0xfc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00f      	beq.n	80037ac <TIM_Base_SetConfig+0x38>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003792:	d00b      	beq.n	80037ac <TIM_Base_SetConfig+0x38>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a37      	ldr	r2, [pc, #220]	@ (8003874 <TIM_Base_SetConfig+0x100>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d007      	beq.n	80037ac <TIM_Base_SetConfig+0x38>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a36      	ldr	r2, [pc, #216]	@ (8003878 <TIM_Base_SetConfig+0x104>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d003      	beq.n	80037ac <TIM_Base_SetConfig+0x38>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a35      	ldr	r2, [pc, #212]	@ (800387c <TIM_Base_SetConfig+0x108>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d108      	bne.n	80037be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003870 <TIM_Base_SetConfig+0xfc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01b      	beq.n	80037fe <TIM_Base_SetConfig+0x8a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037cc:	d017      	beq.n	80037fe <TIM_Base_SetConfig+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a28      	ldr	r2, [pc, #160]	@ (8003874 <TIM_Base_SetConfig+0x100>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <TIM_Base_SetConfig+0x8a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a27      	ldr	r2, [pc, #156]	@ (8003878 <TIM_Base_SetConfig+0x104>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00f      	beq.n	80037fe <TIM_Base_SetConfig+0x8a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a26      	ldr	r2, [pc, #152]	@ (800387c <TIM_Base_SetConfig+0x108>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00b      	beq.n	80037fe <TIM_Base_SetConfig+0x8a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a25      	ldr	r2, [pc, #148]	@ (8003880 <TIM_Base_SetConfig+0x10c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <TIM_Base_SetConfig+0x8a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a24      	ldr	r2, [pc, #144]	@ (8003884 <TIM_Base_SetConfig+0x110>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_Base_SetConfig+0x8a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a23      	ldr	r2, [pc, #140]	@ (8003888 <TIM_Base_SetConfig+0x114>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d108      	bne.n	8003810 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a0e      	ldr	r2, [pc, #56]	@ (8003870 <TIM_Base_SetConfig+0xfc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d103      	bne.n	8003844 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	611a      	str	r2, [r3, #16]
  }
}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40010000 	.word	0x40010000
 8003874:	40000400 	.word	0x40000400
 8003878:	40000800 	.word	0x40000800
 800387c:	40000c00 	.word	0x40000c00
 8003880:	40014000 	.word	0x40014000
 8003884:	40014400 	.word	0x40014400
 8003888:	40014800 	.word	0x40014800

0800388c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f023 0201 	bic.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 0302 	bic.w	r3, r3, #2
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003954 <TIM_OC1_SetConfig+0xc8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10c      	bne.n	8003902 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0308 	bic.w	r3, r3, #8
 80038ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a13      	ldr	r2, [pc, #76]	@ (8003954 <TIM_OC1_SetConfig+0xc8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d111      	bne.n	800392e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40010000 	.word	0x40010000

08003958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f023 0210 	bic.w	r2, r3, #16
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800398e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0320 	bic.w	r3, r3, #32
 80039a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a2c <TIM_OC2_SetConfig+0xd4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10d      	bne.n	80039d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a15      	ldr	r2, [pc, #84]	@ (8003a2c <TIM_OC2_SetConfig+0xd4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d113      	bne.n	8003a04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000

08003a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <TIM_OC3_SetConfig+0xd0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10d      	bne.n	8003aaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a14      	ldr	r2, [pc, #80]	@ (8003b00 <TIM_OC3_SetConfig+0xd0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d113      	bne.n	8003ada <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	621a      	str	r2, [r3, #32]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40010000 	.word	0x40010000

08003b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	031b      	lsls	r3, r3, #12
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a10      	ldr	r2, [pc, #64]	@ (8003ba0 <TIM_OC4_SetConfig+0x9c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d109      	bne.n	8003b78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	019b      	lsls	r3, r3, #6
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000

08003ba4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e050      	b.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d018      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c54:	d013      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a18      	ldr	r2, [pc, #96]	@ (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00e      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a16      	ldr	r2, [pc, #88]	@ (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a15      	ldr	r2, [pc, #84]	@ (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a13      	ldr	r2, [pc, #76]	@ (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10c      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00
 8003cc8:	40014000 	.word	0x40014000

08003ccc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e03d      	b.n	8003d64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <memset>:
 8003d70:	4402      	add	r2, r0
 8003d72:	4603      	mov	r3, r0
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d100      	bne.n	8003d7a <memset+0xa>
 8003d78:	4770      	bx	lr
 8003d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7e:	e7f9      	b.n	8003d74 <memset+0x4>

08003d80 <__libc_init_array>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	4d0d      	ldr	r5, [pc, #52]	@ (8003db8 <__libc_init_array+0x38>)
 8003d84:	4c0d      	ldr	r4, [pc, #52]	@ (8003dbc <__libc_init_array+0x3c>)
 8003d86:	1b64      	subs	r4, r4, r5
 8003d88:	10a4      	asrs	r4, r4, #2
 8003d8a:	2600      	movs	r6, #0
 8003d8c:	42a6      	cmp	r6, r4
 8003d8e:	d109      	bne.n	8003da4 <__libc_init_array+0x24>
 8003d90:	4d0b      	ldr	r5, [pc, #44]	@ (8003dc0 <__libc_init_array+0x40>)
 8003d92:	4c0c      	ldr	r4, [pc, #48]	@ (8003dc4 <__libc_init_array+0x44>)
 8003d94:	f000 f826 	bl	8003de4 <_init>
 8003d98:	1b64      	subs	r4, r4, r5
 8003d9a:	10a4      	asrs	r4, r4, #2
 8003d9c:	2600      	movs	r6, #0
 8003d9e:	42a6      	cmp	r6, r4
 8003da0:	d105      	bne.n	8003dae <__libc_init_array+0x2e>
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da8:	4798      	blx	r3
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7ee      	b.n	8003d8c <__libc_init_array+0xc>
 8003dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db2:	4798      	blx	r3
 8003db4:	3601      	adds	r6, #1
 8003db6:	e7f2      	b.n	8003d9e <__libc_init_array+0x1e>
 8003db8:	08003e1c 	.word	0x08003e1c
 8003dbc:	08003e1c 	.word	0x08003e1c
 8003dc0:	08003e1c 	.word	0x08003e1c
 8003dc4:	08003e20 	.word	0x08003e20

08003dc8 <memcpy>:
 8003dc8:	440a      	add	r2, r1
 8003dca:	4291      	cmp	r1, r2
 8003dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dd0:	d100      	bne.n	8003dd4 <memcpy+0xc>
 8003dd2:	4770      	bx	lr
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dde:	4291      	cmp	r1, r2
 8003de0:	d1f9      	bne.n	8003dd6 <memcpy+0xe>
 8003de2:	bd10      	pop	{r4, pc}

08003de4 <_init>:
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de6:	bf00      	nop
 8003de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dea:	bc08      	pop	{r3}
 8003dec:	469e      	mov	lr, r3
 8003dee:	4770      	bx	lr

08003df0 <_fini>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr
